{"version":3,"sources":["webpack://reaction-diffusion-webgl/./src/ts/engine.ts","webpack://reaction-diffusion-webgl/./src/ts/enums.ts","webpack://reaction-diffusion-webgl/./src/ts/fps-indicator.ts","webpack://reaction-diffusion-webgl/./src/ts/gl-utils/gl-canvas.ts","webpack://reaction-diffusion-webgl/./src/ts/gl-utils/gl-resource.ts","webpack://reaction-diffusion-webgl/./src/ts/gl-utils/shader-manager.ts","webpack://reaction-diffusion-webgl/./src/ts/gl-utils/shader-sources.ts","webpack://reaction-diffusion-webgl/./src/ts/gl-utils/shader.ts","webpack://reaction-diffusion-webgl/./src/ts/gl-utils/vbo.ts","webpack://reaction-diffusion-webgl/./src/ts/input-image.ts","webpack://reaction-diffusion-webgl/./src/ts/loader.ts","webpack://reaction-diffusion-webgl/./src/ts/main.ts","webpack://reaction-diffusion-webgl/./src/ts/parameters.ts","webpack://reaction-diffusion-webgl/./src/ts/presets.ts","webpack://reaction-diffusion-webgl/./src/ts/texture/image-texture.ts","webpack://reaction-diffusion-webgl/./src/ts/texture/render-to-texture-swapable.ts","webpack://reaction-diffusion-webgl/./src/ts/texture/render-to-texture.ts","webpack://reaction-diffusion-webgl/./src/ts/visor.ts","webpack://reaction-diffusion-webgl/webpack/bootstrap","webpack://reaction-diffusion-webgl/webpack/startup"],"names":["lastUpdateTimestamp","this","squareVBO","VBO","createQuad","gl","greyscaleTexture","ImageTexture","loadFromUrl","colorscaleTexture","internalTextures","RenderToTextureSwapable","initialized","lastIterationUpdate","performance","now","iteration","asyncLoadShader","shader","displayMonochromeShader","displayTricolorShader","displayRampShader","updateUniformShader","updateMapShader","A_FEEDING_MIN","Engine","toFixed","A_FEEDING_MAX","B_KILLING_MIN","B_KILLING_MAX","updateImageMapShader","resetShader","brushApplyShader","brushDisplayShader","initialize","width","height","reserveSpace","update","reset","handleBrush","nbIterations","computeNbIterationsForThisFrame","map","Parameters","parametersMap","EParametersMap","IMAGE","inputImageTexture","InputImage","getTexture","u","value","id","canvasAspectRatio","Page","Canvas","getAspectRatio","imageAspectRatio","patternsScale","use","bindAttributes","displayMode","EDisplayMode","MONOCHROME","updateInternal","splitNbIterations","Math","ceil","updateShader","UNIFORM","AFeedingRate","BKillingRate","ADiffusionRate","BDIffusionRate","VALUE_PICKING","pattern","initialState","EInitialState","BLANK","DISC","CIRCLE","bindUniformsAndAttributes","texture","bindFramebuffer","FRAMEBUFFER","currentFramebuffer","drawArrays","TRIANGLE_STRIP","drawToCanvas","shading","EShading","BINARY","current","GREYSCALE","TRICOLOR","zoom","displayBrush","i","swap","previous","bindUniforms","_iteration","setIndicatorText","toString","mousePosition","getMousePosition","size","brushSize","position","isMouseDown","name","vertexFilename","fragmentFilename","callback","injected","Loader","registerLoadingObject","ShaderManager","buildShader","builtShader","registerLoadedObject","a","Demopage","setErrorMessage","nbIterationsPerFrameAt60FPS","speed","instantFPS","framesSinceLastFPSUpdate","timeOfLastFPSUpdate","setInterval","fps","round","registerFrame","initGL","flags","setError","message","canvas","getCanvas","getContext","disable","CULL_FACE","DEPTH_TEST","BLEND","clearColor","adjustSize","hidpi","cssPixel","window","devicePixelRatio","floor","clientWidth","clientHeight","_gl","GLResource","cachedShaders","infos","sourcesPending","sourcesFailed","loadedSource","success","processSource","source","replace","match","vert","ShaderSources","getSource","frag","processedVert","processedFrag","Shader","loadSource","getShader","registerShader","callAndClearCallbacks","cached","callbacks","cachedCallback","failed","pending","push","deleteShader","freeGLResources","cachedSources","filename","text","url","version","XMLHttpRequest","open","onload","readyState","status","responseText","console","error","statusText","onerror","send","notImplemented","alert","types","str","binder","location","uniform2fv","uniform3fv","uniform4fv","uniform2iv","uniform3iv","uniform4iv","uniform1i","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","unitNb","activeTexture","bindTexture","TEXTURE_2D","TEXTURE_CUBE_MAP","Array","isArray","uniform1iv","uniform1fv","uniform1f","vertexSource","fragmentSource","createShader","type","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","log","uCount","aCount","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","introspection","getProgramInfoLog","deleteProgram","useProgram","currTextureUnitNb","Object","keys","forEach","uName","uniform","loc","aName","attribute","bind","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","Usage","array","staticUsage","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","DYNAMIC_DRAW","normalize","stride","offset","usage","STATIC","DYNAMIC","minX","minY","maxX","maxY","Float32Array","FLOAT","deleteBuffer","enableVertexAttribArray","vertexAttribPointer","setData","currentImageData","hiddenCanvas","document","createElement","hiddenCanvasContext","currentTexture","computeBrightness","r","g","b","imageUploadObservers","image","scalingFactor","min","max","finalWidth","finalHeight","drawImage","imageData","getImageData","rawDataCopy","Uint8ClampedArray","data","iY","iX","brightness","downsizeImageIfNeeded","uploadToGPU","loadingObjects","length","showLoader","updateBlur","blur","style","filter","GLCanvas","alpha","antialias","depth","stencil","preserveDrawingBuffer","STENCIL_TEST","blurChangeObservers","needToAdjustCanvasSize","canvasResizeObservers","needToReset","resetObservers","needToDownload","imageDownloadObservers","engine","visor","Visor","mainLoop","FPSIndicator","msToBlob","blob","navigator","msSaveBlob","toBlob","link","download","href","URL","createObjectURL","click","viewport","requestAnimationFrame","main","controlId","callObservers","observers","observer","isInValuePickingMode","updateParametersVisibility","Controls","setVisibility","clearPreset","Select","setValue","Range","addObserver","Tabs","getValues","exitValuePickingMode","setValues","getValue","storeState","Checkbox","isChecked","Observers","canvasResize","callResetObservers","Button","clearStoredState","updateIndicatorsVisibility","setIndicatorsVisibility","FileControl","addUploadObserver","filesList","FileReader","Image","addEventListener","src","result","readAsDataURL","applyCurrentPreset","selectedPresetId","preset","Presets","aFeeding","aDiffuse","bKilling","bDiffuse","addDownloadObserver","mouseDrag","presets","COLORSCALE","defaultImageData","v","ImageData","createImageData","buildDefaultImageData","_width","_height","createTexture","rampImage","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","texImage2D","RGBA","UNSIGNED_BYTE","previousTexture","RenderToTexture","framebuffer","tmp","createFramebuffer","wantedWidth","wantedHeight","format","framebufferTexture2D","COLOR_ATTACHMENT0","EBarDirection","container","getCanvasContainer","horizontalLine","createBar","HORIZONTAL","appendChild","verticalLine","VERTICAL","currentPos","aimedFeedA","aimedKillB","isVisible","isInRange","legendValue","textContent","canvasSize","getSize","hPixel","vPixel","left","legendContainer","getBoundingClientRect","top","display","mousePos","adjustedY","clamp","interpolate","adjustedX","direction","label","classList","add","labelElement","x","maxDigits","raw","dotIndex","indexOf","nbDigits","substring","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call"],"mappings":"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","file":"main.min.js","sourcesContent":["import { EDisplayMode, EInitialState, EParametersMap, EShading } from \"./enums\";\r\nimport { gl } from \"./gl-utils/gl-canvas\";\r\nimport { Shader } from \"./gl-utils/shader\";\r\nimport * as ShaderManager from \"./gl-utils/shader-manager\";\r\nimport { VBO } from \"./gl-utils/vbo\";\r\nimport * as InputImage from \"./input-image\";\r\nimport * as Loader from \"./loader\";\r\nimport { Parameters } from \"./parameters\";\r\nimport { ImageTexture } from \"./texture/image-texture\";\r\nimport { RenderToTextureSwapable } from \"./texture/render-to-texture-swapable\";\r\n\r\n\r\nclass Engine {\r\n    public static readonly A_FEEDING_MIN: number = 0.01;\r\n    public static readonly A_FEEDING_MAX: number = 0.1;\r\n    public static readonly B_KILLING_MIN: number = 0.045;\r\n    public static readonly B_KILLING_MAX: number = 0.07;\r\n\r\n    private displayMonochromeShader: Shader;\r\n    private displayTricolorShader: Shader;\r\n    private displayRampShader: Shader;\r\n\r\n    private updateUniformShader: Shader;\r\n    private updateMapShader: Shader;\r\n    private updateImageMapShader: Shader;\r\n\r\n    private resetShader: Shader;\r\n    private brushApplyShader: Shader;\r\n    private brushDisplayShader: Shader;\r\n\r\n    private readonly squareVBO: VBO;\r\n\r\n    private readonly greyscaleTexture: ImageTexture;\r\n    private readonly colorscaleTexture: ImageTexture;\r\n\r\n    // first one is used for monochrome or red\r\n    // second one is used for green\r\n    // thrid one is used for blue\r\n    private readonly internalTextures: [RenderToTextureSwapable, RenderToTextureSwapable, RenderToTextureSwapable]; // used for monochrome or red\r\n\r\n    private lastUpdateTimestamp: number = 0;\r\n    private initialized: boolean;\r\n    private _iteration: number;\r\n    private lastIterationUpdate: number;\r\n\r\n    public constructor() {\r\n        this.squareVBO = VBO.createQuad(gl, -1, -1, +1, +1);\r\n\r\n        this.greyscaleTexture = new ImageTexture();\r\n        this.greyscaleTexture.loadFromUrl(\"./resources/greyscale.png\");\r\n\r\n        this.colorscaleTexture = new ImageTexture();\r\n        this.colorscaleTexture.loadFromUrl(\"./resources/colorscale.png\");\r\n\r\n        this.internalTextures = [\r\n            new RenderToTextureSwapable(),\r\n            new RenderToTextureSwapable(),\r\n            new RenderToTextureSwapable(),\r\n        ];\r\n\r\n        this.initialized = false;\r\n        this.lastIterationUpdate = performance.now() - 5000;\r\n        this.iteration = 0;\r\n\r\n        this.asyncLoadShader(\"display-monochrome\", \"fullscreen.vert\", \"display/display-monochrome.frag\", (shader: Shader) => { this.displayMonochromeShader = shader; });\r\n        this.asyncLoadShader(\"display-tricolor\", \"fullscreen.vert\", \"display/display-tricolor.frag\", (shader: Shader) => { this.displayTricolorShader = shader; });\r\n        this.asyncLoadShader(\"display-tricolor\", \"fullscreen.vert\", \"display/display-ramp.frag\", (shader: Shader) => { this.displayRampShader = shader; });\r\n\r\n        this.asyncLoadShader(\"update-uniform\", \"fullscreen.vert\", \"update/update-uniform.frag\", (shader: Shader) => { this.updateUniformShader = shader; });\r\n        this.asyncLoadShader(\"update-map\", \"fullscreen.vert\", \"update/update-map.frag\", (shader: Shader) => { this.updateMapShader = shader; },\r\n            {\r\n                A_FEEDING_MIN: Engine.A_FEEDING_MIN.toFixed(5),\r\n                A_FEEDING_MAX: Engine.A_FEEDING_MAX.toFixed(5),\r\n                B_KILLING_MIN: Engine.B_KILLING_MIN.toFixed(5),\r\n                B_KILLING_MAX: Engine.B_KILLING_MAX.toFixed(5),\r\n            });\r\n        this.asyncLoadShader(\"update-image\", \"fullscreen.vert\", \"update/update-map-image.frag\", (shader: Shader) => { this.updateImageMapShader = shader; });\r\n\r\n        this.asyncLoadShader(\"reset\", \"fullscreen.vert\", \"update/reset.frag\", (shader: Shader) => { this.resetShader = shader; });\r\n        this.asyncLoadShader(\"brush-apply\", \"update/brush.vert\", \"update/brush-apply.frag\", (shader: Shader) => { this.brushApplyShader = shader; });\r\n        this.asyncLoadShader(\"brush-display\", \"update/brush.vert\", \"update/brush-display.frag\", (shader: Shader) => { this.brushDisplayShader = shader; });\r\n    }\r\n\r\n    public initialize(width: number, height: number): void {\r\n        for (const texture of this.internalTextures) {\r\n            texture.reserveSpace(width, height);\r\n        }\r\n        this.initialized = false;\r\n        this.iteration = 0;\r\n    }\r\n\r\n    public update(): void {\r\n        if (!this.initialized) {\r\n            this.initialized = this.reset();\r\n        }\r\n\r\n        this.handleBrush();\r\n\r\n        if (this.initialized) {\r\n            const nbIterations = this.computeNbIterationsForThisFrame();\r\n            if (nbIterations <= 0) {\r\n                return;\r\n            }\r\n\r\n            const map = Parameters.parametersMap;\r\n\r\n            if (map === EParametersMap.IMAGE) {\r\n                if (this.updateImageMapShader) {\r\n                    const inputImageTexture = InputImage.getTexture();\r\n                    this.updateImageMapShader.u[\"uImageMapTexture\"].value = inputImageTexture.id;\r\n\r\n                    const canvasAspectRatio = Page.Canvas.getAspectRatio();\r\n                    const imageAspectRatio = inputImageTexture.width / inputImageTexture.height;\r\n                    if (canvasAspectRatio > imageAspectRatio) {\r\n                        this.updateImageMapShader.u[\"uImageMapScaling\"].value = [canvasAspectRatio / imageAspectRatio, 1];\r\n                    } else {\r\n                        this.updateImageMapShader.u[\"uImageMapScaling\"].value = [1, imageAspectRatio / canvasAspectRatio];\r\n                    }\r\n\r\n                    this.updateImageMapShader.u[\"uDiffuseScaling\"].value = Parameters.patternsScale;\r\n\r\n                    this.updateImageMapShader.use();\r\n                    this.updateImageMapShader.bindAttributes();\r\n                    this.updateImageMapShader.u[\"uTexelSize\"].value = [1 / this.internalTextures[0].width, 1 / this.internalTextures[0].height];\r\n\r\n                    if (Parameters.displayMode === EDisplayMode.MONOCHROME) {\r\n                        this.updateImageMapShader.u[\"uSampledChannel\"].value = [0, 0, 0, 1];\r\n                        this.updateInternal(this.updateImageMapShader, nbIterations, this.internalTextures[0]);\r\n                    } else {\r\n                        const splitNbIterations = Math.ceil(nbIterations / 3);\r\n                        this.updateImageMapShader.u[\"uSampledChannel\"].value = [1, 0, 0, 0];\r\n                        this.updateInternal(this.updateImageMapShader, splitNbIterations, this.internalTextures[0]);\r\n\r\n                        this.updateImageMapShader.u[\"uSampledChannel\"].value = [0, 1, 0, 0];\r\n                        this.updateInternal(this.updateImageMapShader, splitNbIterations, this.internalTextures[1]);\r\n\r\n                        this.updateImageMapShader.u[\"uSampledChannel\"].value = [0, 0, 1, 0];\r\n                        this.updateInternal(this.updateImageMapShader, splitNbIterations, this.internalTextures[2]);\r\n                    }\r\n                }\r\n            } else {\r\n                let updateShader: Shader;\r\n\r\n                if (map === EParametersMap.UNIFORM) {\r\n                    if (this.updateUniformShader) {\r\n                        this.updateUniformShader.u[\"uRates\"].value = [\r\n                            Parameters.AFeedingRate,\r\n                            Parameters.BKillingRate,\r\n                            Parameters.ADiffusionRate,\r\n                            Parameters.BDIffusionRate,\r\n                        ];\r\n                        updateShader = this.updateUniformShader;\r\n                    }\r\n                } else if (map === EParametersMap.VALUE_PICKING) {\r\n                    if (this.updateMapShader) {\r\n                        this.updateMapShader.u[\"uRates\"].value = [\r\n                            Parameters.ADiffusionRate,\r\n                            Parameters.BDIffusionRate,\r\n                        ];\r\n                        updateShader = this.updateMapShader;\r\n                    }\r\n                }\r\n\r\n                if (updateShader) {\r\n                    updateShader.use();\r\n                    updateShader.bindAttributes();\r\n                    updateShader.u[\"uTexelSize\"].value = [1 / this.internalTextures[0].width, 1 / this.internalTextures[0].height];\r\n                    this.updateInternal(updateShader, nbIterations, this.internalTextures[0]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): boolean {\r\n        if (this.resetShader) {\r\n\r\n            const pattern = Parameters.initialState;\r\n            this.resetShader.u[\"uPattern\"].value = [pattern === EInitialState.BLANK, pattern === EInitialState.DISC, pattern === EInitialState.CIRCLE, 0];\r\n\r\n            this.resetShader.use();\r\n            this.resetShader.bindUniformsAndAttributes();\r\n\r\n            for (const texture of this.internalTextures) {\r\n                gl.bindFramebuffer(gl.FRAMEBUFFER, texture.currentFramebuffer);\r\n                gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public drawToCanvas(): void {\r\n        let shader: Shader;\r\n\r\n        const displayMode = Parameters.displayMode;\r\n        if (displayMode === EDisplayMode.MONOCHROME) {\r\n            const shading = Parameters.shading;\r\n            if (shading === EShading.BINARY) {\r\n                if (this.displayMonochromeShader) {\r\n                    this.displayMonochromeShader.u[\"uTexture\"].value = this.internalTextures[0].current;\r\n                    shader = this.displayMonochromeShader;\r\n                }\r\n            } else {\r\n                if (this.displayRampShader) {\r\n                    this.displayRampShader.u[\"uTexture\"].value = this.internalTextures[0].current;\r\n\r\n                    if (shading === EShading.GREYSCALE) {\r\n                        this.displayRampShader.u[\"uRamp\"].value = this.greyscaleTexture.id;\r\n                    } else {\r\n                        this.displayRampShader.u[\"uRamp\"].value = this.colorscaleTexture.id;\r\n                    }\r\n                    shader = this.displayRampShader;\r\n                }\r\n            }\r\n        } else if (displayMode === EDisplayMode.TRICOLOR) {\r\n            if (this.displayTricolorShader) {\r\n                this.displayTricolorShader.u[\"uTextureRed\"].value = this.internalTextures[0].current;\r\n                this.displayTricolorShader.u[\"uTextureGreen\"].value = this.internalTextures[1].current;\r\n                this.displayTricolorShader.u[\"uTextureBlue\"].value = this.internalTextures[2].current;\r\n                shader = this.displayTricolorShader;\r\n            }\r\n        }\r\n\r\n        if (shader) {\r\n            shader.u[\"uScaling\"].value = 1 / Parameters.zoom;\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n            shader.use();\r\n            shader.bindUniformsAndAttributes();\r\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n        }\r\n    }\r\n\r\n    public displayBrush(): void {\r\n        if (this.brushDisplayShader) {\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n            this.brushDisplayShader.use();\r\n            this.brushDisplayShader.bindUniformsAndAttributes();\r\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n        }\r\n    }\r\n\r\n    private updateInternal(shader: Shader, nbIterations: number, texture: RenderToTextureSwapable): void {\r\n        for (let i = nbIterations; i > 0; i--) {\r\n            texture.swap();\r\n\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, texture.currentFramebuffer);\r\n            shader.u[\"uPreviousIteration\"].value = texture.previous;\r\n            shader.bindUniforms();\r\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n        }\r\n        this.iteration = this._iteration + nbIterations;\r\n    }\r\n\r\n    private set iteration(i: number) {\r\n        this._iteration = i;\r\n\r\n        const now = performance.now();\r\n        if (now - this.lastIterationUpdate > 200) {\r\n            Page.Canvas.setIndicatorText(\"iteration-indicator\", this._iteration.toString());\r\n            this.lastIterationUpdate = now;\r\n        }\r\n    }\r\n\r\n    private handleBrush(): void {\r\n        if (Parameters.parametersMap !== EParametersMap.VALUE_PICKING) {\r\n            const mousePosition = Page.Canvas.getMousePosition();\r\n            if (mousePosition[0] >= 0 && mousePosition[0] <= 1 && mousePosition[1] >= 0 && mousePosition[1] <= 1) {\r\n                const size = Parameters.brushSize;\r\n                const position = [mousePosition[0], 1 - mousePosition[1]];\r\n                const brushSize = [size / this.internalTextures[0].width, size / this.internalTextures[1].height];\r\n\r\n                if (this.brushApplyShader) {\r\n                    const zoom = Parameters.zoom;\r\n                    this.brushApplyShader.u[\"uPosition\"].value = [0.5 + (position[0] - 0.5) / zoom, 0.5 + (position[1] - 0.5) / zoom];\r\n                    this.brushApplyShader.u[\"uSize\"].value = [brushSize[0] / zoom, brushSize[1] / zoom];\r\n                }\r\n                if (this.brushDisplayShader) {\r\n                    this.brushDisplayShader.u[\"uPosition\"].value = position;\r\n                    this.brushDisplayShader.u[\"uSize\"].value = brushSize;\r\n                }\r\n\r\n                if (this.brushApplyShader && Page.Canvas.isMouseDown()) {\r\n                    this.brushApplyShader.use();\r\n                    this.brushApplyShader.bindUniformsAndAttributes();\r\n\r\n                    for (const texture of this.internalTextures) {\r\n                        gl.bindFramebuffer(gl.FRAMEBUFFER, texture.currentFramebuffer);\r\n                        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private asyncLoadShader(name: string, vertexFilename: string, fragmentFilename: string, callback: (shader: Shader) => unknown, injected: any = {}): void {\r\n        const id = `shader-${name}`;\r\n        Loader.registerLoadingObject(id);\r\n\r\n        ShaderManager.buildShader({\r\n            fragmentFilename,\r\n            vertexFilename,\r\n            injected,\r\n        }, (builtShader: Shader | null) => {\r\n            Loader.registerLoadedObject(id);\r\n\r\n            if (builtShader !== null) {\r\n                builtShader.a[\"aCorner\"].VBO = this.squareVBO;\r\n                callback(builtShader);\r\n            } else {\r\n                Page.Demopage.setErrorMessage(`${name}-shader-error`, `Failed to build '${name}' shader.`);\r\n            }\r\n        });\r\n    }\r\n\r\n    private computeNbIterationsForThisFrame(): number {\r\n        // Limit update speed to have same speed at 144fps than at 60fps\r\n        const nbIterationsPerFrameAt60FPS = Parameters.speed;\r\n        const MAX_FPS = 60;\r\n        const MIN_FPS = 10;\r\n\r\n        const now = performance.now();\r\n        const instantFPS = 1000 / (0.1 + now - this.lastUpdateTimestamp);\r\n        this.lastUpdateTimestamp = now;\r\n\r\n        if (instantFPS > MAX_FPS) { // runs very fast, limit update speed to run with expected speed\r\n            return Math.ceil(MAX_FPS / instantFPS * nbIterationsPerFrameAt60FPS);\r\n        } else if (instantFPS < MIN_FPS) { // runs very slow, try to reduce the workload to avoid huge freezes\r\n            return Math.ceil(instantFPS / MIN_FPS * nbIterationsPerFrameAt60FPS);\r\n        }\r\n\r\n        return nbIterationsPerFrameAt60FPS;\r\n    }\r\n}\r\n\r\nexport {\r\n    Engine,\r\n};\r\n","enum EParametersMap {\r\n    UNIFORM = \"uniform\",\r\n    VALUE_PICKING = \"value_picking\", // technical, not defined in the control\r\n    IMAGE = \"image\",\r\n}\r\n\r\nenum EInitialState {\r\n    BLANK = \"blank\",\r\n    DISC = \"disc\",\r\n    CIRCLE = \"circle\",\r\n}\r\n\r\nenum EDisplayMode {\r\n    MONOCHROME = \"monochrome\",\r\n    TRICOLOR = \"tricolor\",\r\n}\r\n\r\nenum EShading {\r\n    BINARY = \"binary\",\r\n    GREYSCALE = \"greyscale\",\r\n    COLORSCALE = \"colorscale\",\r\n}\r\n\r\nexport {\r\n    EDisplayMode,\r\n    EInitialState,\r\n    EShading,\r\n    EParametersMap,\r\n};\r\n","import \"./page-interface-generated\";\r\n\r\n\r\nlet framesSinceLastFPSUpdate = 0;\r\nlet timeOfLastFPSUpdate = performance.now();\r\n\r\nsetInterval(() => {\r\n    const now = performance.now();\r\n    const fps = 1000 * framesSinceLastFPSUpdate / (now - timeOfLastFPSUpdate);\r\n    timeOfLastFPSUpdate = now;\r\n    framesSinceLastFPSUpdate = 0;\r\n\r\n    Page.Canvas.setIndicatorText(\"fps-indicator\", Math.round(fps).toString());\r\n}, 500);\r\n\r\nfunction registerFrame(): void {\r\n    framesSinceLastFPSUpdate++;\r\n}\r\n\r\nexport { registerFrame };\r\n","import \"../page-interface-generated\";\r\n\r\nlet gl: WebGLRenderingContext = null;\r\n\r\n/** Initializes a WebGL context */\r\nfunction initGL(flags?: object): boolean {\r\n    function setError(message: string): void {\r\n        Page.Demopage.setErrorMessage(\"webgl-support\", message);\r\n    }\r\n\r\n    const canvas = Page.Canvas.getCanvas();\r\n\r\n    gl = canvas.getContext(\"webgl\", flags) as WebGLRenderingContext;\r\n    if (gl == null) {\r\n        gl = canvas.getContext(\"experimental-webgl\", flags) as WebGLRenderingContext;\r\n        if (gl == null) {\r\n            setError(\"Your browser or device does not seem to support WebGL.\");\r\n            return false;\r\n        }\r\n\r\n        setError(`Your browser or device only supports experimental WebGL.\r\nThe simulation may not run as expected.`);\r\n    }\r\n\r\n    gl.disable(gl.CULL_FACE);\r\n    gl.disable(gl.DEPTH_TEST);\r\n    gl.disable(gl.BLEND);\r\n    gl.clearColor(0, 0, 0, 1);\r\n\r\n    return true;\r\n}\r\n\r\n/* Adjusts the GL canvas size to the actual canvas element size on the page */\r\nfunction adjustSize(hidpi: boolean = false): void {\r\n    const cssPixel: number = (hidpi) ? window.devicePixelRatio : 1;\r\n\r\n    const canvas = gl.canvas as HTMLCanvasElement;\r\n\r\n    const width: number = Math.floor(canvas.clientWidth * cssPixel);\r\n    const height: number = Math.floor(canvas.clientHeight * cssPixel);\r\n    if (canvas.width !== width || canvas.height !== height) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n    }\r\n}\r\n\r\nexport {\r\n    adjustSize,\r\n    initGL,\r\n    gl,\r\n};\r\n","abstract class GLResource {\r\n    private _gl: WebGLRenderingContext;\r\n\r\n    constructor(gl: WebGLRenderingContext) {\r\n        this._gl = gl;\r\n    }\r\n\r\n    public gl(): WebGLRenderingContext {\r\n        return this._gl;\r\n    }\r\n\r\n    public abstract freeGLResources(): void;\r\n}\r\n\r\nexport { GLResource };\r\n","import { gl } from \"./gl-canvas\";\r\nimport { Shader } from \"./shader\";\r\nimport * as ShaderSources from \"./shader-sources\";\r\n\r\ntype RegisterCallback = (success: boolean, shader: Shader | null) => void;\r\n\r\ninterface IShaderInfos {\r\n    fragmentFilename: string;\r\n    vertexFilename: string;\r\n    injected: { [id: string]: string };\r\n}\r\n\r\ninterface ICachedShader {\r\n    shader: Shader | null;\r\n    infos: IShaderInfos;\r\n    pending: boolean;\r\n    failed: boolean;\r\n    callbacks: RegisterCallback[];\r\n}\r\n\r\nconst cachedShaders: { [id: string]: ICachedShader } = {};\r\n\r\nfunction getShader(name: string): Shader | null {\r\n    return cachedShaders[name].shader;\r\n}\r\n\r\ntype BuildCallback = (builtShader: Shader | null) => void;\r\n\r\nfunction buildShader(infos: IShaderInfos, callback: BuildCallback): void {\r\n    let sourcesPending = 2;\r\n    let sourcesFailed = 0;\r\n\r\n    function loadedSource(success: boolean): void {\r\n        function processSource(source: string): string {\r\n            return source.replace(/#INJECT\\(([^)]*)\\)/mg, (match: string, name: string) => {\r\n                if (infos.injected[name]) {\r\n                    return infos.injected[name];\r\n                }\r\n                return match;\r\n            });\r\n        }\r\n\r\n        sourcesPending--;\r\n        if (!success) {\r\n            sourcesFailed++;\r\n        }\r\n\r\n        if (sourcesPending === 0) {\r\n            let shader = null;\r\n\r\n            if (sourcesFailed === 0) {\r\n                const vert = ShaderSources.getSource(infos.vertexFilename);\r\n                const frag = ShaderSources.getSource(infos.fragmentFilename);\r\n\r\n                const processedVert = processSource(vert);\r\n                const processedFrag = processSource(frag);\r\n                shader = new Shader(gl, processedVert, processedFrag);\r\n            }\r\n\r\n            callback(shader);\r\n        }\r\n    }\r\n\r\n    ShaderSources.loadSource(infos.vertexFilename, loadedSource);\r\n    ShaderSources.loadSource(infos.fragmentFilename, loadedSource);\r\n}\r\n\r\nfunction registerShader(name: string, infos: IShaderInfos, callback: RegisterCallback): void {\r\n    function callAndClearCallbacks(cached: ICachedShader): void {\r\n        for (const cachedCallback of cached.callbacks) {\r\n            cachedCallback(!cached.failed, cached.shader);\r\n        }\r\n\r\n        cached.callbacks = [];\r\n    }\r\n\r\n    if (typeof cachedShaders[name] === \"undefined\") {\r\n        cachedShaders[name] = {\r\n            callbacks: [callback],\r\n            failed: false,\r\n            infos,\r\n            pending: true,\r\n            shader: null,\r\n        };\r\n        const cached = cachedShaders[name];\r\n\r\n        buildShader(infos, (builtShader: Shader | null) => {\r\n            cached.pending = false;\r\n            cached.failed = builtShader === null;\r\n            cached.shader = builtShader;\r\n\r\n            callAndClearCallbacks(cached);\r\n        });\r\n    } else {\r\n        const cached = cachedShaders[name];\r\n\r\n        if (cached.pending === true) {\r\n            cached.callbacks.push(callback);\r\n        } else {\r\n            callAndClearCallbacks(cached);\r\n        }\r\n    }\r\n}\r\n\r\nfunction deleteShader(name: string): void {\r\n    if (typeof cachedShaders[name] !== \"undefined\") {\r\n        if (cachedShaders[name].shader !== null) {\r\n            cachedShaders[name].shader.freeGLResources();\r\n        }\r\n        delete cachedShaders[name];\r\n    }\r\n}\r\n\r\nexport {\r\n    buildShader,\r\n    getShader,\r\n    IShaderInfos,\r\n    registerShader,\r\n    deleteShader,\r\n};\r\n","type LoadCallback = (success: boolean) => void;\r\n\r\ninterface ICachedSource {\r\n    text: string;\r\n    pending: boolean;\r\n    failed: boolean;\r\n    callbacks: LoadCallback[];\r\n}\r\n\r\nconst cachedSources: { [id: string]: ICachedSource } = {};\r\n\r\n/* Fetches asynchronously the shader source from server and stores it in cache. */\r\nfunction loadSource(filename: string, callback: LoadCallback): void {\r\n    function callAndClearCallbacks(cached: ICachedSource): void {\r\n        for (const cachedCallback of cached.callbacks) {\r\n            cachedCallback(!cached.failed);\r\n        }\r\n\r\n        cached.callbacks = [];\r\n    }\r\n\r\n    if (typeof cachedSources[filename] === \"undefined\") {\r\n        cachedSources[filename] = {\r\n            callbacks: [callback],\r\n            failed: false,\r\n            pending: true,\r\n            text: null,\r\n        };\r\n        const cached = cachedSources[filename];\r\n\r\n        let url = \"./shaders/\" + filename;\r\n        if (typeof Page.version !== \"undefined\") {\r\n            url += `?v=${Page.version}`;\r\n        }\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", url, true);\r\n        xhr.onload = () => {\r\n            if (xhr.readyState === 4) {\r\n                cached.pending = false;\r\n\r\n                if (xhr.status === 200) {\r\n                    cached.text = xhr.responseText;\r\n                    cached.failed = false;\r\n                } else {\r\n                    console.error(`Cannot load '${filename}' shader source: ${xhr.statusText}`);\r\n                    cached.failed = true;\r\n                }\r\n\r\n                callAndClearCallbacks(cached);\r\n            }\r\n        };\r\n        xhr.onerror = () => {\r\n            console.error(`Cannot load '${filename}' shader source: ${xhr.statusText}`);\r\n            cached.pending = false;\r\n            cached.failed = true;\r\n            callAndClearCallbacks(cached);\r\n        };\r\n\r\n        xhr.send(null);\r\n    } else {\r\n        const cached = cachedSources[filename];\r\n\r\n        if (cached.pending === true) {\r\n            cached.callbacks.push(callback);\r\n        } else {\r\n            cached.callbacks = [callback];\r\n            callAndClearCallbacks(cached);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getSource(filename: string): string {\r\n    return cachedSources[filename].text;\r\n}\r\n\r\nexport {\r\n    getSource,\r\n    loadSource,\r\n};\r\n","import { GLResource } from \"./gl-resource\";\r\nimport { VBO } from \"./vbo\";\r\n\r\nfunction notImplemented(): void {\r\n    alert(\"NOT IMPLEMENTED YET\");\r\n}\r\n\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number | number[]): void;\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    if (Array.isArray(value)) {\r\n        gl.uniform1fv(location, value);\r\n    } else {\r\n        gl.uniform1f(location, value);\r\n    }\r\n}\r\n\r\nfunction bindUniformFloat2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform2fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform3fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform4fv(location, value);\r\n}\r\n\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number | number[]): void;\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    if (Array.isArray(value)) {\r\n        gl.uniform1iv(location, value);\r\n    } else {\r\n        gl.uniform1iv(location, value);\r\n    }\r\n}\r\n\r\nfunction bindUniformInt2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: boolean | number): void {\r\n    gl.uniform1i(location, +value);\r\n}\r\n\r\nfunction bindUniformBool2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformFloatMat2(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix2fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat3(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix3fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat4(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix4fv(location, false, value);\r\n}\r\n\r\nfunction bindSampler2D(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number,\r\n    value: WebGLTexture): void {\r\n    gl.uniform1i(location, unitNb);\r\n    gl.activeTexture((gl as any)[\"TEXTURE\" + unitNb] as number);\r\n    gl.bindTexture(gl.TEXTURE_2D, value);\r\n}\r\n\r\nfunction bindSamplerCube(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number,\r\n    value: WebGLTexture): void {\r\n    gl.uniform1i(location, unitNb);\r\n    gl.activeTexture((gl as any)[\"TEXTURE\" + unitNb] as number);\r\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, value);\r\n}\r\n\r\n/* From WebGL spec:\r\n* http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14 */\r\ninterface IBindingType {\r\n    str: string;\r\n    binder: (...args: any[]) => unknown;\r\n}\r\nconst types: { [index: string]: IBindingType } = {\r\n    0x8B50: { str: \"FLOAT_VEC2\", binder: bindUniformFloat2v },\r\n    0x8B51: { str: \"FLOAT_VEC3\", binder: bindUniformFloat3v },\r\n    0x8B52: { str: \"FLOAT_VEC4\", binder: bindUniformFloat4v },\r\n    0x8B53: { str: \"INT_VEC2\", binder: bindUniformInt2v },\r\n    0x8B54: { str: \"INT_VEC3\", binder: bindUniformInt3v },\r\n    0x8B55: { str: \"INT_VEC4\", binder: bindUniformInt4v },\r\n    0x8B56: { str: \"BOOL\", binder: bindUniformBool },\r\n    0x8B57: { str: \"BOOL_VEC2\", binder: bindUniformBool2v },\r\n    0x8B58: { str: \"BOOL_VEC3\", binder: bindUniformBool3v },\r\n    0x8B59: { str: \"BOOL_VEC4\", binder: bindUniformBool4v },\r\n    0x8B5A: { str: \"FLOAT_MAT2\", binder: bindUniformFloatMat2 },\r\n    0x8B5B: { str: \"FLOAT_MAT3\", binder: bindUniformFloatMat3 },\r\n    0x8B5C: { str: \"FLOAT_MAT4\", binder: bindUniformFloatMat4 },\r\n    0x8B5E: { str: \"SAMPLER_2D\", binder: bindSampler2D },\r\n    0x8B60: { str: \"SAMPLER_CUBE\", binder: bindSamplerCube },\r\n    0x1400: { str: \"BYTE\", binder: notImplemented },\r\n    0x1401: { str: \"UNSIGNED_BYTE\", binder: notImplemented },\r\n    0x1402: { str: \"SHORT\", binder: notImplemented },\r\n    0x1403: { str: \"UNSIGNED_SHORT\", binder: notImplemented },\r\n    0x1404: { str: \"INT\", binder: bindUniformInt },\r\n    0x1405: { str: \"UNSIGNED_INT\", binder: notImplemented },\r\n    0x1406: { str: \"FLOAT\", binder: bindUniformFloat },\r\n};\r\n\r\ninterface IShaderUniform {\r\n    value: boolean | boolean[] | number | number[] | WebGLTexture | WebGLTexture[];\r\n    loc: WebGLUniformLocation;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\ninterface IShaderAttribute {\r\n    VBO: VBO;\r\n    loc: GLint;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\nclass ShaderProgram extends GLResource {\r\n    public u: { [name: string]: IShaderUniform };\r\n    public a: { [name: string]: IShaderAttribute };\r\n\r\n    private id: WebGLProgram;\r\n    private uCount: number;\r\n    private aCount: number;\r\n\r\n    constructor(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string) {\r\n        function createShader(type: GLenum, source: string): WebGLShader {\r\n            const shader = gl.createShader(type);\r\n            gl.shaderSource(shader, source);\r\n            gl.compileShader(shader);\r\n\r\n            const compileSuccess = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n            if (!compileSuccess) {\r\n                console.error(gl.getShaderInfoLog(shader));\r\n                console.log(source);\r\n                gl.deleteShader(shader);\r\n                return null;\r\n            }\r\n\r\n            return shader;\r\n        }\r\n\r\n        super(gl);\r\n\r\n        this.id = null;\r\n        this.uCount = 0;\r\n        this.aCount = 0;\r\n\r\n        const vertexShader = createShader(gl.VERTEX_SHADER, vertexSource);\r\n        const fragmentShader = createShader(gl.FRAGMENT_SHADER, fragmentSource);\r\n\r\n        const id = gl.createProgram();\r\n        gl.attachShader(id, vertexShader);\r\n        gl.attachShader(id, fragmentShader);\r\n        gl.linkProgram(id);\r\n\r\n        const linkSuccess = gl.getProgramParameter(id, gl.LINK_STATUS);\r\n        if (!linkSuccess) {\r\n            console.error(gl.getProgramInfoLog(id));\r\n            gl.deleteProgram(id);\r\n        } else {\r\n            this.id = id;\r\n\r\n            this.introspection();\r\n        }\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        super.gl().deleteProgram(this.id);\r\n        this.id = null;\r\n    }\r\n\r\n    public use(): void {\r\n        super.gl().useProgram(this.id);\r\n    }\r\n\r\n    public bindUniforms(): void {\r\n        const gl: WebGLRenderingContext = super.gl();\r\n        let currTextureUnitNb: number = 0;\r\n\r\n        Object.keys(this.u).forEach((uName: string) => {\r\n            const uniform = this.u[uName];\r\n            if (uniform.value !== null) {\r\n                if (uniform.type === 0x8B5E || uniform.type === 0x8B60) {\r\n                    const unitNb: number = currTextureUnitNb;\r\n                    types[uniform.type].binder(gl, uniform.loc, unitNb, uniform.value);\r\n                    currTextureUnitNb++;\r\n                } else {\r\n                    types[uniform.type].binder(gl, uniform.loc, uniform.value);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public bindAttributes(): void {\r\n        Object.keys(this.a).forEach((aName: string) => {\r\n            const attribute = this.a[aName];\r\n            if (attribute.VBO !== null) {\r\n                attribute.VBO.bind(attribute.loc);\r\n            }\r\n        });\r\n    }\r\n\r\n    public bindUniformsAndAttributes(): void {\r\n        this.bindUniforms();\r\n        this.bindAttributes();\r\n    }\r\n\r\n    private introspection(): void {\r\n        const gl = super.gl();\r\n\r\n        this.uCount = gl.getProgramParameter(this.id, gl.ACTIVE_UNIFORMS);\r\n        this.u = {};\r\n        for (let i = 0; i < this.uCount; i++) {\r\n            const uniform = gl.getActiveUniform(this.id, i);\r\n            const name = uniform.name;\r\n\r\n            this.u[name] = {\r\n                loc: gl.getUniformLocation(this.id, name),\r\n                size: uniform.size,\r\n                type: uniform.type,\r\n                value: null,\r\n            };\r\n        }\r\n\r\n        this.aCount = gl.getProgramParameter(this.id, gl.ACTIVE_ATTRIBUTES);\r\n        this.a = {};\r\n        for (let i = 0; i < this.aCount; i++) {\r\n            const attribute = gl.getActiveAttrib(this.id, i);\r\n            const name = attribute.name;\r\n\r\n            this.a[name] = {\r\n                VBO: null,\r\n                loc: gl.getAttribLocation(this.id, name),\r\n                size: attribute.size,\r\n                type: attribute.type,\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport { ShaderProgram as Shader };\r\n","import { GLResource } from \"./gl-resource\";\r\n\r\nenum Usage {\r\n    DYNAMIC,\r\n    STATIC,\r\n}\r\n\r\nclass VBO extends GLResource {\r\n    public static createQuad(gl: WebGLRenderingContext, minX: number, minY: number, maxX: number, maxY: number): VBO {\r\n        const vert = [\r\n            minX, minY,\r\n            maxX, minY,\r\n            minX, maxY,\r\n            maxX, maxY,\r\n        ];\r\n\r\n        return new VBO(gl, new Float32Array(vert), 2, gl.FLOAT, true);\r\n    }\r\n\r\n    private id: WebGLBuffer;\r\n    private size: number;\r\n    private type: GLenum;\r\n    private normalize: GLboolean;\r\n    private stride: GLsizei;\r\n    private offset: GLintptr;\r\n    private usage: Usage;\r\n\r\n    constructor(gl: WebGLRenderingContext, array: any, size: number, type: GLenum, staticUsage: boolean = true) {\r\n        super(gl);\r\n\r\n        this.id = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        if (staticUsage) {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n        } else {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.DYNAMIC_DRAW);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        this.size = size;\r\n        this.type = type;\r\n        this.normalize = false;\r\n        this.stride = 0;\r\n        this.offset = 0;\r\n        this.usage = (staticUsage) ? Usage.STATIC : Usage.DYNAMIC;\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        this.gl().deleteBuffer(this.id);\r\n        this.id = null;\r\n    }\r\n\r\n    public bind(location: GLuint): void {\r\n        const gl = super.gl();\r\n        gl.enableVertexAttribArray(location);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        gl.vertexAttribPointer(location, this.size, this.type, this.normalize, this.stride, this.offset);\r\n    }\r\n\r\n    public setData(array: any): void {\r\n        const gl = super.gl();\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        if (this.usage === Usage.STATIC) {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n        } else {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.DYNAMIC_DRAW);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    }\r\n}\r\n\r\nexport { VBO };\r\n","import { Parameters } from \"./parameters\";\r\nimport { ImageTexture } from \"./texture/image-texture\";\r\n\r\n\r\nconst maxResolution = 512;\r\nconst hiddenCanvas = document.createElement(\"canvas\");\r\nconst hiddenCanvasContext = hiddenCanvas.getContext(\"2d\");\r\n\r\nlet currentImageData: ImageData;\r\nlet currentTexture: ImageTexture = null;\r\n\r\nfunction computeBrightness(r: number, g: number, b: number): number {\r\n    return (0.21 * r) + (0.72 * g) + (0.07 * b);\r\n}\r\n\r\nfunction downsizeImageIfNeeded(image: HTMLImageElement): ImageData {\r\n    const scalingFactor = Math.min(1, maxResolution / Math.max(image.width, image.height));\r\n    const finalWidth = Math.ceil(scalingFactor * image.width);\r\n    const finalHeight = Math.ceil(scalingFactor * image.height);\r\n\r\n    hiddenCanvas.width = finalWidth;\r\n    hiddenCanvas.height = finalHeight;\r\n    hiddenCanvasContext.drawImage(image, 0, 0, finalWidth, finalHeight);\r\n\r\n    const imageData = hiddenCanvasContext.getImageData(0, 0, hiddenCanvas.width, hiddenCanvas.height);\r\n    const rawDataCopy = new Uint8ClampedArray(imageData.data);\r\n\r\n    // revert vertically, and store brightness in alpha channel\r\n    let i = 0;\r\n    for (let iY = imageData.height - 1; iY >= 0; iY--) {\r\n        for (let iX = 0; iX < imageData.width; iX++) {\r\n            const r = rawDataCopy[4 * (iX + iY * imageData.width)];\r\n            const g = rawDataCopy[4 * (iX + iY * imageData.width) + 1];\r\n            const b = rawDataCopy[4 * (iX + iY * imageData.width) + 2];\r\n            const brightness = computeBrightness(r, g, b);\r\n            imageData.data[i++] = r;\r\n            imageData.data[i++] = g;\r\n            imageData.data[i++] = b;\r\n            imageData.data[i++] = brightness;\r\n        }\r\n    }\r\n    return imageData;\r\n}\r\n\r\nParameters.imageUploadObservers.push((image: HTMLImageElement) => {\r\n    currentImageData = downsizeImageIfNeeded(image);\r\n    if (currentTexture !== null) {\r\n        currentTexture.uploadToGPU(currentImageData);\r\n    }\r\n});\r\n\r\nfunction getTexture(): ImageTexture {\r\n    if (currentTexture === null) {\r\n        currentTexture = new ImageTexture(currentImageData);\r\n    }\r\n\r\n    return currentTexture;\r\n}\r\n\r\nexport {\r\n    getTexture,\r\n};\r\n","import \"./page-interface-generated\";\r\n\r\n\r\nconst loadingObjects: { [id: string]: boolean } = {};\r\n\r\nfunction registerLoadingObject(id: string): void {\r\n    if (Object.keys(loadingObjects).length === 0) {\r\n        Page.Canvas.showLoader(true);\r\n    }\r\n    loadingObjects[id] = false;\r\n}\r\n\r\nfunction registerLoadedObject(id: string): void {\r\n    delete loadingObjects[id];\r\n\r\n    if (Object.keys(loadingObjects).length === 0) {\r\n        Page.Canvas.showLoader(false);\r\n    }\r\n}\r\n\r\nexport {\r\n    registerLoadedObject,\r\n    registerLoadingObject,\r\n};\r\n","import { Engine } from \"./engine\";\r\nimport * as FPSIndicator from \"./fps-indicator\";\r\n\r\nimport * as GLCanvas from \"./gl-utils/gl-canvas\";\r\nimport { gl } from \"./gl-utils/gl-canvas\";\r\n\r\nimport { Parameters } from \"./parameters\";\r\nimport { Visor } from \"./visor\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\n\r\nfunction main(): void {\r\n    const webglFlags = {\r\n        alpha: false,\r\n        antialias: true,\r\n        depth: false,\r\n        stencil: false,\r\n        preserveDrawingBuffer: false,\r\n    };\r\n    if (!GLCanvas.initGL(webglFlags)) {\r\n        return;\r\n    }\r\n    gl.disable(gl.CULL_FACE);\r\n    gl.disable(gl.BLEND);\r\n    gl.disable(gl.DEPTH_TEST);\r\n    gl.disable(gl.STENCIL_TEST);\r\n\r\n    const canvas = Page.Canvas.getCanvas();\r\n\r\n    Parameters.blurChangeObservers.push(() => { updateBlur(canvas); });\r\n    updateBlur(canvas);\r\n\r\n    let needToAdjustCanvasSize = true;\r\n    Parameters.canvasResizeObservers.push(() => { needToAdjustCanvasSize = true; });\r\n\r\n    let needToReset = true;\r\n    Parameters.resetObservers.push(() => { needToReset = true; });\r\n\r\n    let needToDownload = false;\r\n    Parameters.imageDownloadObservers.push(() => { needToDownload = true; });\r\n\r\n    const engine = new Engine();\r\n    const visor = new Visor();\r\n\r\n    function mainLoop(): void {\r\n        FPSIndicator.registerFrame();\r\n\r\n        if (needToDownload) {\r\n            // redraw before resizing the canvas because the download pane might open, which changes the canvas size\r\n            engine.drawToCanvas(); // redraw because preserveDrawingBuffer is false\r\n            download(canvas);\r\n            needToDownload = false;\r\n        }\r\n\r\n        if (needToAdjustCanvasSize) {\r\n            GLCanvas.adjustSize(false);\r\n            gl.viewport(0, 0, canvas.width, canvas.height);\r\n            engine.initialize(canvas.width, canvas.height);\r\n            needToAdjustCanvasSize = false;\r\n        }\r\n\r\n        if (needToReset) {\r\n            engine.initialize(canvas.width, canvas.height);\r\n            needToReset = false;\r\n        }\r\n\r\n        engine.update();\r\n        engine.drawToCanvas();\r\n\r\n        visor.update();\r\n\r\n        if (Parameters.displayBrush) {\r\n            engine.displayBrush();\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n    mainLoop();\r\n}\r\n\r\nfunction updateBlur(canvas: HTMLElement): void {\r\n    const blur = Parameters.blur;\r\n    if (blur <= 0) {\r\n        canvas.style.filter = \"\";\r\n    } else {\r\n        canvas.style.filter = `blur(${blur}px)`;\r\n    }\r\n}\r\n\r\nfunction download(canvas: HTMLCanvasElement): void {\r\n    const name = \"reaction-diffusion.png\";\r\n\r\n    if ((canvas as any).msToBlob) { // for IE\r\n        const blob = (canvas as any).msToBlob();\r\n        window.navigator.msSaveBlob(blob, name);\r\n    } else {\r\n        canvas.toBlob((blob: Blob) => {\r\n            const link = document.createElement(\"a\");\r\n            link.download = name;\r\n            link.href = URL.createObjectURL(blob);\r\n            link.click();\r\n        });\r\n    }\r\n}\r\n\r\nmain();\r\n","import { EDisplayMode, EInitialState, EParametersMap, EShading } from \"./enums\";\r\nimport * as Loader from \"./loader\";\r\nimport { Presets } from \"./presets\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    PARAMETERS_MAP_TABS: \"map-tabs-id\",\r\n    PRESET_SELECT: \"presets-fixed-select-id\",\r\n    INPUT_IMAGE_UPLOAD: \"input-image-upload-button\",\r\n    PATTERNS_SCALE: \"pattern-scale-range-id\",\r\n    A_FEEDING_RANGE: \"A-feeding-range-id\",\r\n    A_DIFFUSION_RANGE: \"A-diffusion-range-id\",\r\n    B_KILLING_RANGE: \"B-killing-range-id\",\r\n    B_DIFFUSION_RANGE: \"B-diffusion-range-id\",\r\n    PICK_VALUES_BUTTON: \"pick-values-button-id\",\r\n\r\n    SPEED_RANGE: \"speed-range-id\",\r\n    BRUSH_SIZE_RANGE: \"brush-size-range-id\",\r\n    BRUSH_DISPLAY_CHECKBOX: \"brush-display-checkbox-id\",\r\n    INITIAL_STATE_TABS: \"initial-state-tabs-id\",\r\n    RESET_BUTTON: \"reset-button-id\",\r\n\r\n    DISPLAY_MODE_TABS: \"display-mode-tabs-id\",\r\n    SHADING_TABS: \"shading-tabs-id\",\r\n    ZOOM_RANGE: \"zoom-range-id\",\r\n    BLUR_RANGE: \"blur-range-id\",\r\n    INDICATORS_CHECKBOX: \"indicators-checkbox-id\",\r\n\r\n    IMAGE_DOWNLOAD: \"image-download-id\",\r\n};\r\n\r\ntype Observer = () => unknown;\r\ntype ImageUploadObserver = (image: HTMLImageElement) => unknown;\r\n\r\nfunction callObservers(observers: Observer[]): void {\r\n    for (const observer of observers) {\r\n        observer();\r\n    }\r\n}\r\n\r\nlet isInValuePickingMode = false;\r\n\r\nconst updateParametersVisibility = () => {\r\n    const map = Parameters.parametersMap;\r\n    const displayMode = Parameters.displayMode;\r\n    Page.Controls.setVisibility(controlId.PRESET_SELECT, map !== EParametersMap.IMAGE);\r\n    Page.Controls.setVisibility(controlId.A_FEEDING_RANGE, map !== EParametersMap.IMAGE);\r\n    Page.Controls.setVisibility(controlId.B_KILLING_RANGE, map !== EParametersMap.IMAGE);\r\n    Page.Controls.setVisibility(controlId.PICK_VALUES_BUTTON, map !== EParametersMap.IMAGE);\r\n    Page.Controls.setVisibility(controlId.PATTERNS_SCALE, map === EParametersMap.IMAGE);\r\n    Page.Controls.setVisibility(controlId.A_DIFFUSION_RANGE, map !== EParametersMap.IMAGE);\r\n    Page.Controls.setVisibility(controlId.B_DIFFUSION_RANGE, map !== EParametersMap.IMAGE);\r\n    Page.Controls.setVisibility(controlId.INPUT_IMAGE_UPLOAD, map === EParametersMap.IMAGE);\r\n    Page.Controls.setVisibility(controlId.DISPLAY_MODE_TABS, map === EParametersMap.IMAGE);\r\n    Page.Controls.setVisibility(controlId.SHADING_TABS, displayMode === EDisplayMode.MONOCHROME);\r\n};\r\n\r\nfunction clearPreset(): void {\r\n    Page.Select.setValue(controlId.PRESET_SELECT, null);\r\n}\r\nPage.Range.addObserver(controlId.A_FEEDING_RANGE, clearPreset);\r\nPage.Range.addObserver(controlId.A_DIFFUSION_RANGE, clearPreset);\r\nPage.Range.addObserver(controlId.B_KILLING_RANGE, clearPreset);\r\nPage.Range.addObserver(controlId.B_DIFFUSION_RANGE, clearPreset);\r\n// Page.Range.addObserver(controlId.SPEED_RANGE, clearPreset);\r\n// Page.Tabs.addObserver(controlId.INITIAL_STATE_TABS, clearPreset);\r\n// Page.Tabs.addObserver(controlId.SHADING_TABS, clearPreset);\r\n// Page.Range.addObserver(controlId.ZOOM_RANGE, clearPreset);\r\n\r\nabstract class Parameters {\r\n    public static readonly imageUploadObservers: ImageUploadObserver[] = [];\r\n    public static readonly imageDownloadObservers: Observer[] = [];\r\n    public static readonly canvasResizeObservers: Observer[] = [];\r\n    public static readonly resetObservers: Observer[] = [];\r\n    public static readonly blurChangeObservers: Observer[] = [];\r\n\r\n    public static get parametersMap(): EParametersMap {\r\n        if (isInValuePickingMode) {\r\n            return EParametersMap.VALUE_PICKING;\r\n        }\r\n        return Page.Tabs.getValues(controlId.PARAMETERS_MAP_TABS)[0] as EParametersMap;\r\n    }\r\n    public static exitValuePickingMode(): void {\r\n        isInValuePickingMode = false;\r\n        Page.Tabs.setValues(controlId.PARAMETERS_MAP_TABS, [EParametersMap.UNIFORM]);\r\n        updateParametersVisibility();\r\n    }\r\n\r\n    public static get patternsScale(): number {\r\n        return Page.Range.getValue(controlId.PATTERNS_SCALE);\r\n    }\r\n    public static get AFeedingRate(): number {\r\n        return Page.Range.getValue(controlId.A_FEEDING_RANGE);\r\n    }\r\n    public static set AFeedingRate(value: number) {\r\n        Page.Range.setValue(controlId.A_FEEDING_RANGE, value);\r\n        Page.Range.storeState(controlId.A_FEEDING_RANGE);\r\n        clearPreset();\r\n    }\r\n    public static get ADiffusionRate(): number {\r\n        return Page.Range.getValue(controlId.A_DIFFUSION_RANGE);\r\n    }\r\n    public static get BKillingRate(): number {\r\n        return Page.Range.getValue(controlId.B_KILLING_RANGE);\r\n    }\r\n    public static set BKillingRate(value: number) {\r\n        Page.Range.setValue(controlId.B_KILLING_RANGE, value);\r\n        Page.Range.storeState(controlId.B_KILLING_RANGE);\r\n        clearPreset();\r\n    }\r\n    public static get BDIffusionRate(): number {\r\n        return Page.Range.getValue(controlId.B_DIFFUSION_RANGE);\r\n    }\r\n\r\n    public static get speed(): number {\r\n        return Page.Range.getValue(controlId.SPEED_RANGE);\r\n    }\r\n    public static get brushSize(): number {\r\n        return Page.Range.getValue(controlId.BRUSH_SIZE_RANGE);\r\n    }\r\n    public static get displayBrush(): boolean {\r\n        return !isInValuePickingMode && Page.Checkbox.isChecked(controlId.BRUSH_DISPLAY_CHECKBOX);\r\n    }\r\n    public static get initialState(): EInitialState {\r\n        if (isInValuePickingMode) {\r\n            return EInitialState.CIRCLE;\r\n        }\r\n        return Page.Tabs.getValues(controlId.INITIAL_STATE_TABS)[0] as EInitialState;\r\n    }\r\n\r\n    public static get zoom(): number {\r\n        return Page.Range.getValue(controlId.ZOOM_RANGE);\r\n    }\r\n    public static get blur(): number {\r\n        return Page.Range.getValue(controlId.BLUR_RANGE);\r\n    }\r\n\r\n    public static get displayMode(): EDisplayMode {\r\n        if (Parameters.parametersMap === EParametersMap.IMAGE) {\r\n            return Page.Tabs.getValues(controlId.DISPLAY_MODE_TABS)[0] as EDisplayMode;\r\n        } else {\r\n            return EDisplayMode.MONOCHROME;\r\n        }\r\n    }\r\n\r\n    public static get shading(): EShading {\r\n        return Page.Tabs.getValues(controlId.SHADING_TABS)[0] as EShading;\r\n    }\r\n}\r\n\r\nconst callCanvasResizeObservers = () => { callObservers(Parameters.canvasResizeObservers); };\r\nPage.Canvas.Observers.canvasResize.push(callCanvasResizeObservers);\r\n\r\nconst callResetObservers = () => { callObservers(Parameters.resetObservers); };\r\nPage.Select.addObserver(controlId.PRESET_SELECT, callResetObservers);\r\nPage.Button.addObserver(controlId.RESET_BUTTON, callResetObservers);\r\nPage.Tabs.addObserver(controlId.PARAMETERS_MAP_TABS, callResetObservers);\r\nPage.Tabs.addObserver(controlId.DISPLAY_MODE_TABS, callResetObservers);\r\nPage.Tabs.addObserver(controlId.INITIAL_STATE_TABS, callResetObservers);\r\nParameters.imageUploadObservers.push(callResetObservers);\r\n\r\nPage.Tabs.addObserver(controlId.PARAMETERS_MAP_TABS, () => {\r\n    isInValuePickingMode = false;\r\n    updateParametersVisibility();\r\n\r\n    if (Parameters.parametersMap === EParametersMap.IMAGE) {\r\n        Page.Range.setValue(controlId.ZOOM_RANGE, 1);\r\n        Page.Range.setValue(controlId.SPEED_RANGE, 40);\r\n        Page.Tabs.setValues(controlId.INITIAL_STATE_TABS, [EInitialState.CIRCLE]);\r\n        Page.Tabs.setValues(controlId.SHADING_TABS, [EShading.BINARY]);\r\n\r\n        Page.Range.clearStoredState(controlId.ZOOM_RANGE);\r\n        Page.Range.clearStoredState(controlId.SPEED_RANGE);\r\n        Page.Tabs.clearStoredState(controlId.INITIAL_STATE_TABS);\r\n        Page.Tabs.clearStoredState(controlId.SHADING_TABS);\r\n    }\r\n});\r\nPage.Tabs.addObserver(controlId.DISPLAY_MODE_TABS, updateParametersVisibility);\r\nupdateParametersVisibility();\r\n\r\nconst updateIndicatorsVisibility = () => {\r\n    Page.Canvas.setIndicatorsVisibility(Page.Checkbox.isChecked(controlId.INDICATORS_CHECKBOX));\r\n};\r\nPage.Checkbox.addObserver(controlId.INDICATORS_CHECKBOX, updateIndicatorsVisibility);\r\nupdateIndicatorsVisibility();\r\n\r\nPage.Button.addObserver(controlId.PICK_VALUES_BUTTON, () => {\r\n    Page.Tabs.setValues(controlId.PARAMETERS_MAP_TABS, []);\r\n    isInValuePickingMode = true;\r\n    Page.Range.setValue(controlId.A_DIFFUSION_RANGE, 0.2097);\r\n    Page.Range.setValue(controlId.B_DIFFUSION_RANGE, 0.1050);\r\n    Page.Range.setValue(controlId.ZOOM_RANGE, 1);\r\n    if (Parameters.speed < 30) {\r\n        Page.Range.setValue(controlId.SPEED_RANGE, 30);\r\n    }\r\n    clearPreset();\r\n\r\n    updateParametersVisibility();\r\n    callResetObservers();\r\n});\r\n\r\nPage.Range.addObserver(controlId.BLUR_RANGE, () => {\r\n    callObservers(Parameters.blurChangeObservers);\r\n});\r\n\r\nPage.FileControl.addUploadObserver(controlId.INPUT_IMAGE_UPLOAD, (filesList: FileList) => {\r\n    if (filesList.length === 1) {\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n            const image = new Image();\r\n            image.addEventListener(\"load\", () => {\r\n                for (const observer of Parameters.imageUploadObservers) {\r\n                    observer(image);\r\n                }\r\n            });\r\n            image.src = reader.result as string;\r\n        };\r\n        reader.readAsDataURL(filesList[0]);\r\n    }\r\n});\r\n{\r\n    const url = `./resources/cat.jpg?v=${Page.version}`;\r\n    Loader.registerLoadingObject(url);\r\n\r\n    const defaultImage = new Image();\r\n    defaultImage.addEventListener(\"load\", () => {\r\n        Loader.registerLoadedObject(url);\r\n\r\n        for (const observer of Parameters.imageUploadObservers) {\r\n            observer(defaultImage);\r\n        }\r\n    });\r\n    defaultImage.src = url;\r\n}\r\n\r\nPage.FileControl.addDownloadObserver(controlId.IMAGE_DOWNLOAD, () => {\r\n    callObservers(Parameters.imageDownloadObservers);\r\n    callResetObservers();\r\n});\r\n\r\nfunction applyCurrentPreset(): void {\r\n    if (Parameters.parametersMap === EParametersMap.UNIFORM) {\r\n        const selectedPresetId = Page.Select.getValue(controlId.PRESET_SELECT);\r\n        const preset = Presets[selectedPresetId];\r\n        if (preset) {\r\n            Page.Range.setValue(controlId.A_FEEDING_RANGE, preset.aFeeding);\r\n            Page.Range.setValue(controlId.A_DIFFUSION_RANGE, preset.aDiffuse);\r\n            Page.Range.setValue(controlId.B_KILLING_RANGE, preset.bKilling);\r\n            Page.Range.setValue(controlId.B_DIFFUSION_RANGE, preset.bDiffuse);\r\n            Page.Range.setValue(controlId.SPEED_RANGE, preset.speed);\r\n            Page.Range.setValue(controlId.ZOOM_RANGE, preset.zoom);\r\n            Page.Tabs.setValues(controlId.INITIAL_STATE_TABS, [preset.initialState]);\r\n            Page.Tabs.setValues(controlId.SHADING_TABS, [preset.shading]);\r\n\r\n            Page.Range.clearStoredState(controlId.A_FEEDING_RANGE);\r\n            Page.Range.clearStoredState(controlId.A_DIFFUSION_RANGE);\r\n            Page.Range.clearStoredState(controlId.B_KILLING_RANGE);\r\n            Page.Range.clearStoredState(controlId.B_DIFFUSION_RANGE);\r\n            Page.Range.clearStoredState(controlId.SPEED_RANGE);\r\n            Page.Range.clearStoredState(controlId.ZOOM_RANGE);\r\n            Page.Tabs.clearStoredState(controlId.INITIAL_STATE_TABS);\r\n            Page.Tabs.clearStoredState(controlId.SHADING_TABS);\r\n        }\r\n    }\r\n}\r\nPage.Select.addObserver(controlId.PRESET_SELECT, () => {\r\n    Parameters.exitValuePickingMode();\r\n    applyCurrentPreset();\r\n});\r\nPage.Tabs.addObserver(controlId.PARAMETERS_MAP_TABS, applyCurrentPreset);\r\napplyCurrentPreset();\r\n\r\n// add fake observer to prevent touch events from moving viewport on touch devices\r\nPage.Canvas.Observers.mouseDrag.push(() => { }); /* tslint:disable-line:no-empty */\r\n\r\nexport {\r\n    Parameters,\r\n};\r\n","import { EInitialState, EShading } from \"./enums\";\r\n\r\ninterface IPreset {\r\n    aFeeding: number;\r\n    aDiffuse: number;\r\n    bKilling: number;\r\n    bDiffuse: number;\r\n    speed: number;\r\n    zoom: number;\r\n    initialState: EInitialState;\r\n    shading: EShading;\r\n}\r\n\r\nconst presets: { [id: string]: IPreset } = {\r\n    \"0\": { // tiny waves\r\n        aFeeding: 0.015,\r\n        aDiffuse: 0.210,\r\n        bKilling: 0.049,\r\n        bDiffuse: 0.105,\r\n        speed: 8,\r\n        zoom: 3,\r\n        initialState: EInitialState.DISC,\r\n        shading: EShading.COLORSCALE,\r\n    },\r\n    \"1\": { // lines\r\n        aFeeding: 0.037,\r\n        aDiffuse: 0.500,\r\n        bKilling: 0.059,\r\n        bDiffuse: 0.342,\r\n        speed: 100,\r\n        zoom: 1,\r\n        initialState: EInitialState.CIRCLE,\r\n        shading: EShading.BINARY,\r\n    },\r\n    \"2\": { // orthogonal\r\n        aFeeding: 0.058,\r\n        aDiffuse: 0.210,\r\n        bKilling: 0.063,\r\n        bDiffuse: 0.105,\r\n        speed: 60,\r\n        zoom: 1,\r\n        initialState: EInitialState.CIRCLE,\r\n        shading: EShading.GREYSCALE,\r\n    },\r\n    \"3\": { // shimmer\r\n        aFeeding: 0.021,\r\n        aDiffuse: 0.210,\r\n        bKilling: 0.056,\r\n        bDiffuse: 0.105,\r\n        speed: 10,\r\n        zoom: 2,\r\n        initialState: EInitialState.CIRCLE,\r\n        shading: EShading.COLORSCALE,\r\n    },\r\n    \"4\": { // geometric\r\n        aFeeding: 0.049,\r\n        aDiffuse: 0.210,\r\n        bKilling: 0.061,\r\n        bDiffuse: 0.105,\r\n        speed: 40,\r\n        zoom: 1,\r\n        initialState: EInitialState.CIRCLE,\r\n        shading: EShading.GREYSCALE,\r\n    },\r\n    \"5\": { // holes\r\n        aFeeding: 0.041,\r\n        aDiffuse: 0.210,\r\n        bKilling: 0.059,\r\n        bDiffuse: 0.130,\r\n        speed: 80,\r\n        zoom: 1,\r\n        initialState: EInitialState.DISC,\r\n        shading: EShading.COLORSCALE,\r\n    },\r\n    \"6\": { // epilepsy\r\n        aFeeding: 0.022,\r\n        aDiffuse: 0.210,\r\n        bKilling: 0.049,\r\n        bDiffuse: 0.105,\r\n        speed: 10,\r\n        zoom: 1,\r\n        initialState: EInitialState.CIRCLE,\r\n        shading: EShading.GREYSCALE,\r\n    },\r\n};\r\n\r\nexport {\r\n    IPreset,\r\n    presets as Presets,\r\n};\r\n","import { gl } from \"../gl-utils/gl-canvas\";\r\nimport * as Loader from \"../loader\";\r\n\r\nfunction buildDefaultImageData(): ImageData {\r\n    const v = 128;\r\n\r\n    try {\r\n        return new ImageData(new Uint8ClampedArray([v, v, v, v]), 1, 1);\r\n    } catch {\r\n        console.log(\"Failed to create default ImageData from constructor, using Canvas2D instead...\");\r\n\r\n        const hiddenCanvas = document.createElement(\"canvas\");\r\n        const context = hiddenCanvas.getContext(\"2d\");\r\n        const result = context.createImageData(1, 1);\r\n        for (let i = 0; i < result.data.length; i++) {\r\n            result.data[i] = v;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nconst defaultImageData = buildDefaultImageData();\r\n\r\nclass ImageTexture {\r\n    public readonly id: WebGLTexture;\r\n    private _width: number = -1;\r\n    private _height: number = -1;\r\n\r\n    public constructor(image?: ImageData) {\r\n        this.id = gl.createTexture();\r\n\r\n        this.uploadToGPU(image ?? defaultImageData);\r\n    }\r\n\r\n    public loadFromUrl(url: string): void {\r\n        url = `${url}?v=${Page.version}`;\r\n\r\n        Loader.registerLoadingObject(url);\r\n\r\n        const rampImage = new Image();\r\n        rampImage.addEventListener(\"load\", () => {\r\n            Loader.registerLoadedObject(url);\r\n            this.uploadToGPU(rampImage);\r\n        });\r\n\r\n        rampImage.src = url;\r\n    }\r\n\r\n    public uploadToGPU(image: HTMLImageElement | ImageData): void {\r\n        this._width = image.width;\r\n        this._height = image.height;\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, this.id);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._width;\r\n    }\r\n    public get height(): number {\r\n        return this._height;\r\n    }\r\n}\r\n\r\nexport {\r\n    ImageTexture,\r\n};\r\n","import { RenderToTexture } from \"./render-to-texture\";\r\n\r\n\r\nclass RenderToTextureSwapable {\r\n    private previousTexture: RenderToTexture;\r\n    private currentTexture: RenderToTexture;\r\n\r\n    public constructor() {\r\n        this.previousTexture = new RenderToTexture();\r\n        this.currentTexture = new RenderToTexture();\r\n    }\r\n\r\n    public get previous(): WebGLTexture {\r\n        return this.previousTexture.texture;\r\n    }\r\n    public get current(): WebGLTexture {\r\n        return this.currentTexture.texture;\r\n    }\r\n    public get currentFramebuffer(): WebGLFramebuffer {\r\n        return this.currentTexture.framebuffer;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this.previousTexture.width;\r\n    }\r\n    public get height(): number {\r\n        return this.previousTexture.height;\r\n    }\r\n\r\n\r\n    public reserveSpace(width: number, height: number): void {\r\n        this.previousTexture.reserveSpace(width, height);\r\n        this.currentTexture.reserveSpace(width, height);\r\n    }\r\n\r\n    public swap(): void {\r\n        const tmp = this.currentTexture;\r\n        this.currentTexture = this.previousTexture;\r\n        this.previousTexture = tmp;\r\n    }\r\n}\r\n\r\nexport {\r\n    RenderToTextureSwapable,\r\n};\r\n","import { gl } from \"../gl-utils/gl-canvas\";\r\n\r\n\r\nclass RenderToTexture {\r\n    public readonly texture: WebGLTexture;\r\n    public readonly framebuffer: WebGLFramebuffer;\r\n    private _width: number;\r\n    private _height: number;\r\n\r\n    public constructor() {\r\n        this.texture = gl.createTexture();\r\n        this.framebuffer = gl.createFramebuffer();\r\n        this._width = -1;\r\n        this._height = -1;\r\n    }\r\n\r\n    public reserveSpace(wantedWidth: number, wantedHeight: number): void {\r\n        wantedWidth = Math.ceil(wantedWidth);\r\n        wantedHeight = Math.ceil(wantedHeight);\r\n\r\n        if (this.width !== wantedWidth || this.height !== wantedHeight) {\r\n            gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n\r\n            const format = gl.RGBA;\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, format, wantedWidth, wantedHeight, 0, format, gl.UNSIGNED_BYTE, null);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n            gl.bindTexture(gl.TEXTURE_2D, null);\r\n\r\n            this._width = wantedWidth;\r\n            this._height = wantedHeight;\r\n        }\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this._height;\r\n    }\r\n}\r\n\r\nexport {\r\n    RenderToTexture,\r\n};\r\n","import { Engine } from \"./engine\";\r\nimport { EParametersMap } from \"./enums\";\r\nimport { Parameters } from \"./parameters\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\n\r\nenum EBarDirection {\r\n    HORIZONTAL = \"horizontal\",\r\n    VERTICAL = \"vertical\",\r\n}\r\n\r\ninterface IBar {\r\n    container: HTMLElement;\r\n    legendContainer: HTMLElement;\r\n    legendValue: HTMLSpanElement;\r\n}\r\n\r\nclass Visor {\r\n    private readonly horizontalLine: IBar;\r\n    private readonly verticalLine: IBar;\r\n\r\n    public constructor() {\r\n        const container = Page.Canvas.getCanvasContainer();\r\n\r\n        this.horizontalLine = Visor.createBar(EBarDirection.HORIZONTAL, \"B killing rate\");\r\n        container.appendChild(this.horizontalLine.container);\r\n\r\n        this.verticalLine = Visor.createBar(EBarDirection.VERTICAL, \"A feeding rate\");\r\n        container.appendChild(this.verticalLine.container);\r\n\r\n        Page.Canvas.getCanvas().addEventListener(\"click\", () => {\r\n            if (Parameters.parametersMap === EParametersMap.VALUE_PICKING) {\r\n                const currentPos = Page.Canvas.getMousePosition();\r\n                Parameters.AFeedingRate = Visor.aimedFeedA(currentPos);\r\n                Parameters.BKillingRate = Visor.aimedKillB(currentPos);\r\n                Parameters.exitValuePickingMode();\r\n            }\r\n        });\r\n    }\r\n\r\n    public update(): void {\r\n        const mousePosition = Page.Canvas.getMousePosition();\r\n        const isVisible = (Parameters.parametersMap === EParametersMap.VALUE_PICKING) && Visor.isInRange(0, 1, mousePosition[0]) && Visor.isInRange(0, 1, mousePosition[1]);\r\n\r\n        if (isVisible) {\r\n            this.horizontalLine.legendValue.textContent = Visor.toString(Visor.aimedKillB(mousePosition), 5);\r\n            this.verticalLine.legendValue.textContent = Visor.toString(Visor.aimedFeedA(mousePosition), 5);\r\n\r\n            const canvasSize = Page.Canvas.getSize();\r\n            const hPixel = Math.round(mousePosition[0] * canvasSize[0]);\r\n            const vPixel = Math.round(mousePosition[1] * canvasSize[1]);\r\n            this.horizontalLine.container.style.left = `${hPixel}px`;\r\n            {\r\n                const legendBox = this.horizontalLine.legendContainer.getBoundingClientRect();\r\n                const size = legendBox.width;\r\n                if (hPixel - 0.5 * size < 0) {\r\n                    this.horizontalLine.legendContainer.style.left = `${0.5 * size - hPixel}px`;\r\n                } else if (hPixel + 0.5 * size > canvasSize[0]) {\r\n                    this.horizontalLine.legendContainer.style.left = `${canvasSize[0] - (hPixel + 0.5 * size)}px`;\r\n                } else {\r\n                    this.horizontalLine.legendContainer.style.left = \"\";\r\n                }\r\n            }\r\n\r\n            this.verticalLine.container.style.top = `${vPixel}px`;\r\n            {\r\n                const legendBox = this.verticalLine.legendContainer.getBoundingClientRect();\r\n                const size = legendBox.height;\r\n                if (vPixel - 0.5 * size < 0) {\r\n                    this.verticalLine.legendContainer.style.top = `${0.5 * size - vPixel}px`;\r\n                } else if (vPixel + 0.5 * size > canvasSize[1]) {\r\n                    this.verticalLine.legendContainer.style.top = `${canvasSize[1] - (vPixel + 0.5 * size)}px`;\r\n                } else {\r\n                    this.verticalLine.legendContainer.style.top = \"\";\r\n                }\r\n            }\r\n        }\r\n\r\n        const display = isVisible ? \"\" : \"none\";\r\n        this.horizontalLine.container.style.display = display;\r\n        this.verticalLine.container.style.display = display;\r\n    }\r\n\r\n    private static aimedFeedA(mousePos: number[]): number {\r\n        const y = Visor.clamp(0, 1, 1 - mousePos[1]);\r\n        const adjustedY = 0.5 + (y - 0.5) / Parameters.zoom;\r\n        return Visor.interpolate(Engine.A_FEEDING_MIN, Engine.A_FEEDING_MAX, adjustedY);\r\n    }\r\n\r\n    private static aimedKillB(mousePos: number[]): number {\r\n        const x = Visor.clamp(0, 1, mousePos[0]);\r\n        const adjustedX = 0.5 + (x - 0.5) / Parameters.zoom;\r\n        return Visor.interpolate(Engine.B_KILLING_MIN, Engine.B_KILLING_MAX, adjustedX);\r\n    }\r\n\r\n    private static createBar(direction: EBarDirection, label: string): IBar {\r\n        const container = document.createElement(\"div\");\r\n        container.classList.add(\"visor-bar\");\r\n        container.classList.add(direction);\r\n        container.style.display = \"none\";\r\n\r\n        const legendContainer = document.createElement(\"div\");\r\n        legendContainer.classList.add(\"visor-bar-legend\");\r\n\r\n        const labelElement = document.createElement(\"span\");\r\n        labelElement.textContent = label;\r\n        legendContainer.appendChild(labelElement);\r\n        legendContainer.appendChild(document.createElement(\"br\"));\r\n        const legendValue = document.createElement(\"span\");\r\n        legendValue.textContent = \"?\";\r\n        legendContainer.appendChild(legendValue);\r\n\r\n        container.appendChild(legendContainer);\r\n\r\n        return {\r\n            container,\r\n            legendContainer,\r\n            legendValue,\r\n        };\r\n    }\r\n\r\n    private static clamp(min: number, max: number, x: number): number {\r\n        if (x < min) return min;\r\n        if (x > max) return max;\r\n        return x;\r\n    }\r\n\r\n    private static interpolate(a: number, b: number, x: number): number {\r\n        return b * x + a * (1 - x);\r\n    }\r\n\r\n    private static isInRange(min: number, max: number, x: number): boolean {\r\n        return min <= x && x <= max;\r\n    }\r\n\r\n    private static toString(x: number, maxDigits: number): string {\r\n        const raw = x.toString();\r\n        const dotIndex = raw.indexOf(\".\");\r\n        if (dotIndex < 0) {\r\n            return raw;\r\n        } else {\r\n            const nbDigits = Math.min(maxDigits, raw.length - (dotIndex + 1));\r\n            return raw.substring(0, dotIndex + 1 + nbDigits);\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    Visor,\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(633);\n"],"sourceRoot":""}
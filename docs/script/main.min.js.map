{"version":3,"sources":["webpack://reaction-diffusion-webgl/./src/ts/engine.ts","webpack://reaction-diffusion-webgl/./src/ts/fps-indicator.ts","webpack://reaction-diffusion-webgl/./src/ts/gl-utils/gl-canvas.ts","webpack://reaction-diffusion-webgl/./src/ts/gl-utils/gl-resource.ts","webpack://reaction-diffusion-webgl/./src/ts/gl-utils/shader-manager.ts","webpack://reaction-diffusion-webgl/./src/ts/gl-utils/shader-sources.ts","webpack://reaction-diffusion-webgl/./src/ts/gl-utils/shader.ts","webpack://reaction-diffusion-webgl/./src/ts/gl-utils/vbo.ts","webpack://reaction-diffusion-webgl/./src/ts/input-image.ts","webpack://reaction-diffusion-webgl/./src/ts/loader.ts","webpack://reaction-diffusion-webgl/./src/ts/main.ts","webpack://reaction-diffusion-webgl/./src/ts/parameters.ts","webpack://reaction-diffusion-webgl/./src/ts/texture/render-to-texture-swapable.ts","webpack://reaction-diffusion-webgl/./src/ts/texture/render-to-texture.ts","webpack://reaction-diffusion-webgl/./src/ts/visor.ts","webpack://reaction-diffusion-webgl/webpack/bootstrap","webpack://reaction-diffusion-webgl/webpack/startup"],"names":["this","squareVBO","VBO","createQuad","gl","internalTextures","RenderToTextureSwapable","initialized","lastIterationUpdate","performance","now","iteration","asyncLoadShader","shader","displayMonochromeShader","displayTricolorShader","updateUniformShader","updateMapShader","A_FEEDING_MIN","Engine","toFixed","A_FEEDING_MAX","B_KILLING_MIN","B_KILLING_MAX","updateImageMapShader","resetShader","brushApplyShader","brushDisplayShader","initialize","width","height","reserveSpace","update","reset","handleBrush","nbIterations","Parameters","speed","map","parametersMap","EParametersMap","IMAGE","inputImageTexture","InputImage","getTexture","u","value","id","canvasAspectRatio","Page","Canvas","getAspectRatio","imageAspectRatio","patternsScale","use","bindAttributes","displayMode","EDisplayMode","MONOCHROME","updateInternal","splitNbIterations","Math","ceil","updateShader","UNIFORM","AFeedingRate","BKillingRate","ADiffusionRate","BDIffusionRate","VALUE_PICKING","pattern","initialState","EInitialState","BLANK","DISC","CIRCLE","bindUniformsAndAttributes","texture","bindFramebuffer","FRAMEBUFFER","currentFramebuffer","drawArrays","TRIANGLE_STRIP","drawToCanvas","current","TRICOLOR","displayBrush","i","swap","previous","bindUniforms","_iteration","setIndicatorText","toString","mousePosition","getMousePosition","size","brushSize","position","isMouseDown","name","vertexFilename","fragmentFilename","callback","injected","Loader","registerLoadingObject","ShaderManager","buildShader","builtShader","registerLoadedObject","a","Demopage","setErrorMessage","framesSinceLastFPSUpdate","timeOfLastFPSUpdate","setInterval","fps","round","registerFrame","initGL","flags","setError","message","canvas","getCanvas","getContext","disable","CULL_FACE","DEPTH_TEST","BLEND","clearColor","adjustSize","hidpi","cssPixel","window","devicePixelRatio","floor","clientWidth","clientHeight","_gl","GLResource","cachedShaders","infos","sourcesPending","sourcesFailed","loadedSource","success","processSource","source","replace","match","vert","ShaderSources","getSource","frag","processedVert","processedFrag","Shader","loadSource","getShader","registerShader","callAndClearCallbacks","cached","callbacks","cachedCallback","failed","pending","push","deleteShader","freeGLResources","cachedSources","filename","text","url","version","XMLHttpRequest","open","onload","readyState","status","responseText","console","error","statusText","onerror","send","notImplemented","alert","types","str","binder","location","uniform2fv","uniform3fv","uniform4fv","uniform2iv","uniform3iv","uniform4iv","uniform1i","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","unitNb","activeTexture","bindTexture","TEXTURE_2D","TEXTURE_CUBE_MAP","Array","isArray","uniform1iv","uniform1fv","uniform1f","vertexSource","fragmentSource","createShader","type","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","log","uCount","aCount","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","introspection","getProgramInfoLog","deleteProgram","useProgram","currTextureUnitNb","Object","keys","forEach","uName","uniform","loc","aName","attribute","bind","ACTIVE_UNIFORMS","getActiveUniform","getUniformLocation","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","Usage","array","staticUsage","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","DYNAMIC_DRAW","normalize","stride","offset","usage","STATIC","DYNAMIC","minX","minY","maxX","maxY","Float32Array","FLOAT","deleteBuffer","enableVertexAttribArray","vertexAttribPointer","setData","currentImageData","hiddenCanvas","document","createElement","hiddenCanvasContext","computeBrightness","r","g","b","currentTexture","uploadToGPU","data","Uint8ClampedArray","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","LINEAR","TEXTURE_MAG_FILTER","texImage2D","RGBA","UNSIGNED_BYTE","imageUploadObservers","image","scalingFactor","min","max","finalWidth","finalHeight","drawImage","imageData","getImageData","rawDataCopy","iY","iX","brightness","downsizeImageIfNeeded","createTexture","loadingObjects","length","showLoader","updateBlur","blur","style","filter","GLCanvas","alpha","antialias","depth","stencil","preserveDrawingBuffer","blurChangeObservers","needToAdjustCanvasSize","canvasResizeObservers","needToReset","resetObservers","needToDownload","imageDownloadObservers","engine","visor","Visor","mainLoop","FPSIndicator","msToBlob","blob","navigator","msSaveBlob","toBlob","link","download","href","URL","createObjectURL","click","viewport","requestAnimationFrame","main","controlId","callObservers","observers","observer","isInValuePickingMode","updateParametersVisibility","Controls","setVisibility","Tabs","getValues","exitValuePickingMode","setValues","Range","getValue","setValue","Checkbox","isChecked","Observers","canvasResize","callResetObservers","Button","addObserver","updateIndicatorsVisibility","setIndicatorsVisibility","FileControl","addUploadObserver","filesList","FileReader","Image","addEventListener","src","result","readAsDataURL","addDownloadObserver","previousTexture","RenderToTexture","framebuffer","tmp","createFramebuffer","_width","_height","wantedWidth","wantedHeight","format","framebufferTexture2D","COLOR_ATTACHMENT0","EBarDirection","container","getCanvasContainer","horizontalLine","createBar","HORIZONTAL","appendChild","verticalLine","VERTICAL","currentPos","aimedFeedA","aimedKillB","isVisible","isInRange","legendValue","textContent","canvasSize","getSize","hPixel","vPixel","left","legendContainer","getBoundingClientRect","top","display","mousePos","y","clamp","interpolate","x","direction","label","classList","add","labelElement","maxDigits","raw","dotIndex","indexOf","nbDigits","substring","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call"],"mappings":"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","file":"main.min.js","sourcesContent":["import { gl } from \"./gl-utils/gl-canvas\";\r\nimport { Shader } from \"./gl-utils/shader\";\r\nimport * as ShaderManager from \"./gl-utils/shader-manager\";\r\nimport { VBO } from \"./gl-utils/vbo\";\r\nimport { EDisplayMode, EInitialState, EParametersMap, Parameters } from \"./parameters\";\r\nimport * as InputImage from \"./input-image\";\r\nimport { RenderToTextureSwapable } from \"./texture/render-to-texture-swapable\";\r\nimport * as Loader from \"./loader\";\r\n\r\n\r\nclass Engine {\r\n    public static readonly A_FEEDING_MIN: number = 0.01;\r\n    public static readonly A_FEEDING_MAX: number = 0.1;\r\n    public static readonly B_KILLING_MIN: number = 0.045;\r\n    public static readonly B_KILLING_MAX: number = 0.07;\r\n\r\n    private displayMonochromeShader: Shader;\r\n    private displayTricolorShader: Shader;\r\n\r\n    private updateUniformShader: Shader;\r\n    private updateMapShader: Shader;\r\n    private updateImageMapShader: Shader;\r\n\r\n    private resetShader: Shader;\r\n    private brushApplyShader: Shader;\r\n    private brushDisplayShader: Shader;\r\n\r\n    private readonly squareVBO: VBO;\r\n\r\n    // first one is used for monochrome or red\r\n    // second one is used for green\r\n    // thrid one is used for blue\r\n    private readonly internalTextures: [RenderToTextureSwapable, RenderToTextureSwapable, RenderToTextureSwapable]; // used for monochrome or red\r\n\r\n    private initialized: boolean;\r\n    private _iteration: number;\r\n    private lastIterationUpdate: number;\r\n\r\n    public constructor() {\r\n        this.squareVBO = VBO.createQuad(gl, -1, -1, +1, +1);\r\n\r\n        this.internalTextures = [\r\n            new RenderToTextureSwapable(),\r\n            new RenderToTextureSwapable(),\r\n            new RenderToTextureSwapable(),\r\n        ];\r\n\r\n        this.initialized = false;\r\n        this.lastIterationUpdate = performance.now() - 5000;\r\n        this.iteration = 0;\r\n\r\n        this.asyncLoadShader(\"display-monochrome\", \"fullscreen.vert\", \"display/display-monochrome.frag\", (shader: Shader) => { this.displayMonochromeShader = shader; });\r\n        this.asyncLoadShader(\"display-tricolor\", \"fullscreen.vert\", \"display/display-tricolor.frag\", (shader: Shader) => { this.displayTricolorShader = shader; });\r\n        this.asyncLoadShader(\"update-uniform\", \"fullscreen.vert\", \"update/update-uniform.frag\", (shader: Shader) => { this.updateUniformShader = shader; });\r\n        this.asyncLoadShader(\"update-map\", \"fullscreen.vert\", \"update/update-map.frag\", (shader: Shader) => { this.updateMapShader = shader; },\r\n            {\r\n                A_FEEDING_MIN: Engine.A_FEEDING_MIN.toFixed(5),\r\n                A_FEEDING_MAX: Engine.A_FEEDING_MAX.toFixed(5),\r\n                B_KILLING_MIN: Engine.B_KILLING_MIN.toFixed(5),\r\n                B_KILLING_MAX: Engine.B_KILLING_MAX.toFixed(5),\r\n            });\r\n        this.asyncLoadShader(\"update-image\", \"fullscreen.vert\", \"update/update-map-image.frag\", (shader: Shader) => { this.updateImageMapShader = shader; });\r\n        this.asyncLoadShader(\"reset\", \"fullscreen.vert\", \"update/reset.frag\", (shader: Shader) => { this.resetShader = shader; });\r\n        this.asyncLoadShader(\"brush-apply\", \"update/brush.vert\", \"update/brush-apply.frag\", (shader: Shader) => { this.brushApplyShader = shader; });\r\n        this.asyncLoadShader(\"brush-display\", \"update/brush.vert\", \"update/brush-display.frag\", (shader: Shader) => { this.brushDisplayShader = shader; });\r\n    }\r\n\r\n    public initialize(width: number, height: number): void {\r\n        for (const texture of this.internalTextures) {\r\n            texture.reserveSpace(width, height);\r\n        }\r\n        this.initialized = false;\r\n        this.iteration = 0;\r\n    }\r\n\r\n    public update(): void {\r\n        if (!this.initialized) {\r\n            this.initialized = this.reset();\r\n        }\r\n\r\n        this.handleBrush();\r\n\r\n        if (this.initialized) {\r\n            const nbIterations = Parameters.speed;\r\n            const map = Parameters.parametersMap;\r\n\r\n            if (map === EParametersMap.IMAGE) {\r\n                if (this.updateImageMapShader) {\r\n                    const inputImageTexture = InputImage.getTexture();\r\n                    this.updateImageMapShader.u[\"uImageMapTexture\"].value = inputImageTexture.id;\r\n\r\n                    const canvasAspectRatio = Page.Canvas.getAspectRatio();\r\n                    const imageAspectRatio = inputImageTexture.width / inputImageTexture.height;\r\n                    if (canvasAspectRatio > imageAspectRatio) {\r\n                        this.updateImageMapShader.u[\"uImageMapScaling\"].value = [canvasAspectRatio / imageAspectRatio, 1];\r\n                    } else {\r\n                        this.updateImageMapShader.u[\"uImageMapScaling\"].value = [1, imageAspectRatio / canvasAspectRatio];\r\n                    }\r\n\r\n                    this.updateImageMapShader.u[\"uDiffuseScaling\"].value = Parameters.patternsScale;\r\n\r\n                    this.updateImageMapShader.use();\r\n                    this.updateImageMapShader.bindAttributes();\r\n                    this.updateImageMapShader.u[\"uTexelSize\"].value = [1 / this.internalTextures[0].width, 1 / this.internalTextures[0].height];\r\n\r\n                    if (Parameters.displayMode === EDisplayMode.MONOCHROME) {\r\n                        this.updateImageMapShader.u[\"uSampledChannel\"].value = [0, 0, 0, 1];\r\n                        this.updateInternal(this.updateImageMapShader, nbIterations, this.internalTextures[0]);\r\n                    } else {\r\n                        const splitNbIterations = Math.ceil(nbIterations / 3);\r\n                        this.updateImageMapShader.u[\"uSampledChannel\"].value = [1, 0, 0, 0];\r\n                        this.updateInternal(this.updateImageMapShader, splitNbIterations, this.internalTextures[0]);\r\n\r\n                        this.updateImageMapShader.u[\"uSampledChannel\"].value = [0, 1, 0, 0];\r\n                        this.updateInternal(this.updateImageMapShader, splitNbIterations, this.internalTextures[1]);\r\n\r\n                        this.updateImageMapShader.u[\"uSampledChannel\"].value = [0, 0, 1, 0];\r\n                        this.updateInternal(this.updateImageMapShader, splitNbIterations, this.internalTextures[2]);\r\n                    }\r\n                }\r\n            } else {\r\n                let updateShader: Shader;\r\n\r\n                if (map === EParametersMap.UNIFORM) {\r\n                    if (this.updateUniformShader) {\r\n                        this.updateUniformShader.u[\"uRates\"].value = [\r\n                            Parameters.AFeedingRate,\r\n                            Parameters.BKillingRate,\r\n                            Parameters.ADiffusionRate,\r\n                            Parameters.BDIffusionRate,\r\n                        ];\r\n                        updateShader = this.updateUniformShader;\r\n                    }\r\n                } else if (map === EParametersMap.VALUE_PICKING) {\r\n                    if (this.updateMapShader) {\r\n                        this.updateMapShader.u[\"uRates\"].value = [\r\n                            Parameters.ADiffusionRate,\r\n                            Parameters.BDIffusionRate,\r\n                        ];\r\n                        updateShader = this.updateMapShader;\r\n                    }\r\n                }\r\n\r\n                if (updateShader) {\r\n                    updateShader.use();\r\n                    updateShader.bindAttributes();\r\n                    updateShader.u[\"uTexelSize\"].value = [1 / this.internalTextures[0].width, 1 / this.internalTextures[0].height];\r\n                    this.updateInternal(updateShader, nbIterations, this.internalTextures[0]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public reset(): boolean {\r\n        if (this.resetShader) {\r\n\r\n            const pattern = Parameters.initialState;\r\n            this.resetShader.u[\"uPattern\"].value = [pattern === EInitialState.BLANK, pattern === EInitialState.DISC, pattern === EInitialState.CIRCLE, 0];\r\n\r\n            this.resetShader.use();\r\n            this.resetShader.bindUniformsAndAttributes();\r\n\r\n            for (const texture of this.internalTextures) {\r\n                gl.bindFramebuffer(gl.FRAMEBUFFER, texture.currentFramebuffer);\r\n                gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public drawToCanvas(): void {\r\n        let shader: Shader;\r\n\r\n        const displayMode = Parameters.displayMode;\r\n        if (displayMode === EDisplayMode.MONOCHROME) {\r\n            if (this.displayMonochromeShader) {\r\n                this.displayMonochromeShader.u[\"uTexture\"].value = this.internalTextures[0].current;\r\n                shader = this.displayMonochromeShader;\r\n            }\r\n        } else if (displayMode === EDisplayMode.TRICOLOR) {\r\n            if (this.displayTricolorShader) {\r\n                this.displayTricolorShader.u[\"uTextureRed\"].value = this.internalTextures[0].current;\r\n                this.displayTricolorShader.u[\"uTextureGreen\"].value = this.internalTextures[1].current;\r\n                this.displayTricolorShader.u[\"uTextureBlue\"].value = this.internalTextures[2].current;\r\n                shader = this.displayTricolorShader;\r\n            }\r\n        }\r\n\r\n        if (shader) {\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n            shader.use();\r\n            shader.bindUniformsAndAttributes();\r\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n        }\r\n    }\r\n\r\n    public displayBrush(): void {\r\n        if (this.brushDisplayShader) {\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n            this.brushDisplayShader.use();\r\n            this.brushDisplayShader.bindUniformsAndAttributes();\r\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n        }\r\n    }\r\n\r\n    private updateInternal(shader: Shader, nbIterations: number, texture: RenderToTextureSwapable): void {\r\n        for (let i = nbIterations; i > 0; i--) {\r\n            texture.swap();\r\n\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, texture.currentFramebuffer);\r\n            shader.u[\"uPreviousIteration\"].value = texture.previous;\r\n            shader.bindUniforms();\r\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n        }\r\n        this.iteration = this._iteration + nbIterations;\r\n    }\r\n\r\n    private set iteration(i: number) {\r\n        this._iteration = i;\r\n\r\n        const now = performance.now();\r\n        if (now - this.lastIterationUpdate > 200) {\r\n            Page.Canvas.setIndicatorText(\"iteration-indicator\", this._iteration.toString());\r\n            this.lastIterationUpdate = now;\r\n        }\r\n    }\r\n\r\n    private handleBrush(): void {\r\n        if (Parameters.parametersMap !== EParametersMap.VALUE_PICKING) {\r\n            const mousePosition = Page.Canvas.getMousePosition();\r\n            if (mousePosition[0] >= 0 && mousePosition[0] <= 1 && mousePosition[1] >= 0 && mousePosition[1] <= 1) {\r\n                const size = Parameters.brushSize;\r\n                const position = [mousePosition[0], 1 - mousePosition[1]];\r\n                const brushSize = [size / this.internalTextures[0].width, size / this.internalTextures[1].height];\r\n\r\n                if (this.brushApplyShader) {\r\n                    this.brushApplyShader.u[\"uPosition\"].value = position;\r\n                    this.brushApplyShader.u[\"uSize\"].value = brushSize;\r\n                }\r\n                if (this.brushDisplayShader) {\r\n                    this.brushDisplayShader.u[\"uPosition\"].value = position;\r\n                    this.brushDisplayShader.u[\"uSize\"].value = brushSize;\r\n                }\r\n\r\n                if (this.brushApplyShader && Page.Canvas.isMouseDown()) {\r\n                    this.brushApplyShader.use();\r\n                    this.brushApplyShader.bindUniformsAndAttributes();\r\n\r\n                    for (const texture of this.internalTextures) {\r\n                        gl.bindFramebuffer(gl.FRAMEBUFFER, texture.currentFramebuffer);\r\n                        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private asyncLoadShader(name: string, vertexFilename: string, fragmentFilename: string, callback: (shader: Shader) => unknown, injected: any = {}): void {\r\n        const id = `shader-${name}`;\r\n        Loader.registerLoadingObject(id);\r\n\r\n        ShaderManager.buildShader({\r\n            fragmentFilename,\r\n            vertexFilename,\r\n            injected,\r\n        }, (builtShader: Shader | null) => {\r\n            Loader.registerLoadedObject(id);\r\n\r\n            if (builtShader !== null) {\r\n                builtShader.a[\"aCorner\"].VBO = this.squareVBO;\r\n                callback(builtShader);\r\n            } else {\r\n                Page.Demopage.setErrorMessage(`${name}-shader-error`, `Failed to build '${name}' shader.`);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport {\r\n    Engine,\r\n};\r\n\r\n","import \"./page-interface-generated\";\r\n\r\n\r\nlet framesSinceLastFPSUpdate = 0;\r\nlet timeOfLastFPSUpdate = performance.now();\r\n\r\nsetInterval(() => {\r\n    const now = performance.now();\r\n    const fps = 1000 * framesSinceLastFPSUpdate / (now - timeOfLastFPSUpdate);\r\n    timeOfLastFPSUpdate = now;\r\n    framesSinceLastFPSUpdate = 0;\r\n\r\n    Page.Canvas.setIndicatorText(\"fps-indicator\", Math.round(fps).toString());\r\n}, 500);\r\n\r\nfunction registerFrame(): void {\r\n    framesSinceLastFPSUpdate++;\r\n}\r\n\r\nexport { registerFrame };\r\n","import \"../page-interface-generated\";\r\n\r\nlet gl: WebGLRenderingContext = null;\r\n\r\n/** Initializes a WebGL context */\r\nfunction initGL(flags?: object): boolean {\r\n    function setError(message: string): void {\r\n        Page.Demopage.setErrorMessage(\"webgl-support\", message);\r\n    }\r\n\r\n    const canvas = Page.Canvas.getCanvas();\r\n\r\n    gl = canvas.getContext(\"webgl\", flags) as WebGLRenderingContext;\r\n    if (gl == null) {\r\n        gl = canvas.getContext(\"experimental-webgl\", flags) as WebGLRenderingContext;\r\n        if (gl == null) {\r\n            setError(\"Your browser or device does not seem to support WebGL.\");\r\n            return false;\r\n        }\r\n\r\n        setError(`Your browser or device only supports experimental WebGL.\r\nThe simulation may not run as expected.`);\r\n    }\r\n\r\n    gl.disable(gl.CULL_FACE);\r\n    gl.disable(gl.DEPTH_TEST);\r\n    gl.disable(gl.BLEND);\r\n    gl.clearColor(0, 0, 0, 1);\r\n\r\n    return true;\r\n}\r\n\r\n/* Adjusts the GL canvas size to the actual canvas element size on the page */\r\nfunction adjustSize(hidpi: boolean = false): void {\r\n    const cssPixel: number = (hidpi) ? window.devicePixelRatio : 1;\r\n\r\n    const canvas = gl.canvas as HTMLCanvasElement;\r\n\r\n    const width: number = Math.floor(canvas.clientWidth * cssPixel);\r\n    const height: number = Math.floor(canvas.clientHeight * cssPixel);\r\n    if (canvas.width !== width || canvas.height !== height) {\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n    }\r\n}\r\n\r\nexport {\r\n    adjustSize,\r\n    initGL,\r\n    gl,\r\n};\r\n","abstract class GLResource {\r\n    private _gl: WebGLRenderingContext;\r\n\r\n    constructor(gl: WebGLRenderingContext) {\r\n        this._gl = gl;\r\n    }\r\n\r\n    public gl(): WebGLRenderingContext {\r\n        return this._gl;\r\n    }\r\n\r\n    public abstract freeGLResources(): void;\r\n}\r\n\r\nexport { GLResource };\r\n","import { gl } from \"./gl-canvas\";\r\nimport { Shader } from \"./shader\";\r\nimport * as ShaderSources from \"./shader-sources\";\r\n\r\ntype RegisterCallback = (success: boolean, shader: Shader | null) => void;\r\n\r\ninterface IShaderInfos {\r\n    fragmentFilename: string;\r\n    vertexFilename: string;\r\n    injected: { [id: string]: string };\r\n}\r\n\r\ninterface ICachedShader {\r\n    shader: Shader | null;\r\n    infos: IShaderInfos;\r\n    pending: boolean;\r\n    failed: boolean;\r\n    callbacks: RegisterCallback[];\r\n}\r\n\r\nconst cachedShaders: { [id: string]: ICachedShader } = {};\r\n\r\nfunction getShader(name: string): Shader | null {\r\n    return cachedShaders[name].shader;\r\n}\r\n\r\ntype BuildCallback = (builtShader: Shader | null) => void;\r\n\r\nfunction buildShader(infos: IShaderInfos, callback: BuildCallback): void {\r\n    let sourcesPending = 2;\r\n    let sourcesFailed = 0;\r\n\r\n    function loadedSource(success: boolean): void {\r\n        function processSource(source: string): string {\r\n            return source.replace(/#INJECT\\(([^)]*)\\)/mg, (match: string, name: string) => {\r\n                if (infos.injected[name]) {\r\n                    return infos.injected[name];\r\n                }\r\n                return match;\r\n            });\r\n        }\r\n\r\n        sourcesPending--;\r\n        if (!success) {\r\n            sourcesFailed++;\r\n        }\r\n\r\n        if (sourcesPending === 0) {\r\n            let shader = null;\r\n\r\n            if (sourcesFailed === 0) {\r\n                const vert = ShaderSources.getSource(infos.vertexFilename);\r\n                const frag = ShaderSources.getSource(infos.fragmentFilename);\r\n\r\n                const processedVert = processSource(vert);\r\n                const processedFrag = processSource(frag);\r\n                shader = new Shader(gl, processedVert, processedFrag);\r\n            }\r\n\r\n            callback(shader);\r\n        }\r\n    }\r\n\r\n    ShaderSources.loadSource(infos.vertexFilename, loadedSource);\r\n    ShaderSources.loadSource(infos.fragmentFilename, loadedSource);\r\n}\r\n\r\nfunction registerShader(name: string, infos: IShaderInfos, callback: RegisterCallback): void {\r\n    function callAndClearCallbacks(cached: ICachedShader): void {\r\n        for (const cachedCallback of cached.callbacks) {\r\n            cachedCallback(!cached.failed, cached.shader);\r\n        }\r\n\r\n        cached.callbacks = [];\r\n    }\r\n\r\n    if (typeof cachedShaders[name] === \"undefined\") {\r\n        cachedShaders[name] = {\r\n            callbacks: [callback],\r\n            failed: false,\r\n            infos,\r\n            pending: true,\r\n            shader: null,\r\n        };\r\n        const cached = cachedShaders[name];\r\n\r\n        buildShader(infos, (builtShader: Shader | null) => {\r\n            cached.pending = false;\r\n            cached.failed = builtShader === null;\r\n            cached.shader = builtShader;\r\n\r\n            callAndClearCallbacks(cached);\r\n        });\r\n    } else {\r\n        const cached = cachedShaders[name];\r\n\r\n        if (cached.pending === true) {\r\n            cached.callbacks.push(callback);\r\n        } else {\r\n            callAndClearCallbacks(cached);\r\n        }\r\n    }\r\n}\r\n\r\nfunction deleteShader(name: string): void {\r\n    if (typeof cachedShaders[name] !== \"undefined\") {\r\n        if (cachedShaders[name].shader !== null) {\r\n            cachedShaders[name].shader.freeGLResources();\r\n        }\r\n        delete cachedShaders[name];\r\n    }\r\n}\r\n\r\nexport {\r\n    buildShader,\r\n    getShader,\r\n    IShaderInfos,\r\n    registerShader,\r\n    deleteShader,\r\n};\r\n","type LoadCallback = (success: boolean) => void;\r\n\r\ninterface ICachedSource {\r\n    text: string;\r\n    pending: boolean;\r\n    failed: boolean;\r\n    callbacks: LoadCallback[];\r\n}\r\n\r\nconst cachedSources: { [id: string]: ICachedSource } = {};\r\n\r\n/* Fetches asynchronously the shader source from server and stores it in cache. */\r\nfunction loadSource(filename: string, callback: LoadCallback): void {\r\n    function callAndClearCallbacks(cached: ICachedSource): void {\r\n        for (const cachedCallback of cached.callbacks) {\r\n            cachedCallback(!cached.failed);\r\n        }\r\n\r\n        cached.callbacks = [];\r\n    }\r\n\r\n    if (typeof cachedSources[filename] === \"undefined\") {\r\n        cachedSources[filename] = {\r\n            callbacks: [callback],\r\n            failed: false,\r\n            pending: true,\r\n            text: null,\r\n        };\r\n        const cached = cachedSources[filename];\r\n\r\n        let url = \"./shaders/\" + filename;\r\n        if (typeof Page.version !== \"undefined\") {\r\n            url += `?v=${Page.version}`;\r\n        }\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.open(\"GET\", url, true);\r\n        xhr.onload = () => {\r\n            if (xhr.readyState === 4) {\r\n                cached.pending = false;\r\n\r\n                if (xhr.status === 200) {\r\n                    cached.text = xhr.responseText;\r\n                    cached.failed = false;\r\n                } else {\r\n                    console.error(`Cannot load '${filename}' shader source: ${xhr.statusText}`);\r\n                    cached.failed = true;\r\n                }\r\n\r\n                callAndClearCallbacks(cached);\r\n            }\r\n        };\r\n        xhr.onerror = () => {\r\n            console.error(`Cannot load '${filename}' shader source: ${xhr.statusText}`);\r\n            cached.pending = false;\r\n            cached.failed = true;\r\n            callAndClearCallbacks(cached);\r\n        };\r\n\r\n        xhr.send(null);\r\n    } else {\r\n        const cached = cachedSources[filename];\r\n\r\n        if (cached.pending === true) {\r\n            cached.callbacks.push(callback);\r\n        } else {\r\n            cached.callbacks = [callback];\r\n            callAndClearCallbacks(cached);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getSource(filename: string): string {\r\n    return cachedSources[filename].text;\r\n}\r\n\r\nexport {\r\n    getSource,\r\n    loadSource,\r\n};\r\n","import { GLResource } from \"./gl-resource\";\r\nimport { VBO } from \"./vbo\";\r\n\r\nfunction notImplemented(): void {\r\n    alert(\"NOT IMPLEMENTED YET\");\r\n}\r\n\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number | number[]): void;\r\nfunction bindUniformFloat(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    if (Array.isArray(value)) {\r\n        gl.uniform1fv(location, value);\r\n    } else {\r\n        gl.uniform1f(location, value);\r\n    }\r\n}\r\n\r\nfunction bindUniformFloat2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform2fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform3fv(location, value);\r\n}\r\n\r\nfunction bindUniformFloat4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform4fv(location, value);\r\n}\r\n\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number | number[]): void;\r\nfunction bindUniformInt(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    if (Array.isArray(value)) {\r\n        gl.uniform1iv(location, value);\r\n    } else {\r\n        gl.uniform1iv(location, value);\r\n    }\r\n}\r\n\r\nfunction bindUniformInt2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformInt4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: boolean | number): void {\r\n    gl.uniform1i(location, +value);\r\n}\r\n\r\nfunction bindUniformBool2v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform2iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool3v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform3iv(location, value);\r\n}\r\n\r\nfunction bindUniformBool4v(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: any): void {\r\n    gl.uniform4iv(location, value);\r\n}\r\n\r\nfunction bindUniformFloatMat2(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix2fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat3(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix3fv(location, false, value);\r\n}\r\n\r\nfunction bindUniformFloatMat4(gl: WebGLRenderingContext, location: WebGLUniformLocation, value: number[]): void {\r\n    gl.uniformMatrix4fv(location, false, value);\r\n}\r\n\r\nfunction bindSampler2D(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number,\r\n    value: WebGLTexture): void {\r\n    gl.uniform1i(location, unitNb);\r\n    gl.activeTexture((gl as any)[\"TEXTURE\" + unitNb] as number);\r\n    gl.bindTexture(gl.TEXTURE_2D, value);\r\n}\r\n\r\nfunction bindSamplerCube(gl: WebGLRenderingContext, location: WebGLUniformLocation, unitNb: number,\r\n    value: WebGLTexture): void {\r\n    gl.uniform1i(location, unitNb);\r\n    gl.activeTexture((gl as any)[\"TEXTURE\" + unitNb] as number);\r\n    gl.bindTexture(gl.TEXTURE_CUBE_MAP, value);\r\n}\r\n\r\n/* From WebGL spec:\r\n* http://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14 */\r\ninterface IBindingType {\r\n    str: string;\r\n    binder: (...args: any[]) => unknown;\r\n}\r\nconst types: { [index: string]: IBindingType } = {\r\n    0x8B50: { str: \"FLOAT_VEC2\", binder: bindUniformFloat2v },\r\n    0x8B51: { str: \"FLOAT_VEC3\", binder: bindUniformFloat3v },\r\n    0x8B52: { str: \"FLOAT_VEC4\", binder: bindUniformFloat4v },\r\n    0x8B53: { str: \"INT_VEC2\", binder: bindUniformInt2v },\r\n    0x8B54: { str: \"INT_VEC3\", binder: bindUniformInt3v },\r\n    0x8B55: { str: \"INT_VEC4\", binder: bindUniformInt4v },\r\n    0x8B56: { str: \"BOOL\", binder: bindUniformBool },\r\n    0x8B57: { str: \"BOOL_VEC2\", binder: bindUniformBool2v },\r\n    0x8B58: { str: \"BOOL_VEC3\", binder: bindUniformBool3v },\r\n    0x8B59: { str: \"BOOL_VEC4\", binder: bindUniformBool4v },\r\n    0x8B5A: { str: \"FLOAT_MAT2\", binder: bindUniformFloatMat2 },\r\n    0x8B5B: { str: \"FLOAT_MAT3\", binder: bindUniformFloatMat3 },\r\n    0x8B5C: { str: \"FLOAT_MAT4\", binder: bindUniformFloatMat4 },\r\n    0x8B5E: { str: \"SAMPLER_2D\", binder: bindSampler2D },\r\n    0x8B60: { str: \"SAMPLER_CUBE\", binder: bindSamplerCube },\r\n    0x1400: { str: \"BYTE\", binder: notImplemented },\r\n    0x1401: { str: \"UNSIGNED_BYTE\", binder: notImplemented },\r\n    0x1402: { str: \"SHORT\", binder: notImplemented },\r\n    0x1403: { str: \"UNSIGNED_SHORT\", binder: notImplemented },\r\n    0x1404: { str: \"INT\", binder: bindUniformInt },\r\n    0x1405: { str: \"UNSIGNED_INT\", binder: notImplemented },\r\n    0x1406: { str: \"FLOAT\", binder: bindUniformFloat },\r\n};\r\n\r\ninterface IShaderUniform {\r\n    value: boolean | boolean[] | number | number[] | WebGLTexture | WebGLTexture[];\r\n    loc: WebGLUniformLocation;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\ninterface IShaderAttribute {\r\n    VBO: VBO;\r\n    loc: GLint;\r\n    size: number;\r\n    type: number;\r\n}\r\n\r\nclass ShaderProgram extends GLResource {\r\n    public u: { [name: string]: IShaderUniform };\r\n    public a: { [name: string]: IShaderAttribute };\r\n\r\n    private id: WebGLProgram;\r\n    private uCount: number;\r\n    private aCount: number;\r\n\r\n    constructor(gl: WebGLRenderingContext, vertexSource: string, fragmentSource: string) {\r\n        function createShader(type: GLenum, source: string): WebGLShader {\r\n            const shader = gl.createShader(type);\r\n            gl.shaderSource(shader, source);\r\n            gl.compileShader(shader);\r\n\r\n            const compileSuccess = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n            if (!compileSuccess) {\r\n                console.error(gl.getShaderInfoLog(shader));\r\n                console.log(source);\r\n                gl.deleteShader(shader);\r\n                return null;\r\n            }\r\n\r\n            return shader;\r\n        }\r\n\r\n        super(gl);\r\n\r\n        this.id = null;\r\n        this.uCount = 0;\r\n        this.aCount = 0;\r\n\r\n        const vertexShader = createShader(gl.VERTEX_SHADER, vertexSource);\r\n        const fragmentShader = createShader(gl.FRAGMENT_SHADER, fragmentSource);\r\n\r\n        const id = gl.createProgram();\r\n        gl.attachShader(id, vertexShader);\r\n        gl.attachShader(id, fragmentShader);\r\n        gl.linkProgram(id);\r\n\r\n        const linkSuccess = gl.getProgramParameter(id, gl.LINK_STATUS);\r\n        if (!linkSuccess) {\r\n            console.error(gl.getProgramInfoLog(id));\r\n            gl.deleteProgram(id);\r\n        } else {\r\n            this.id = id;\r\n\r\n            this.introspection();\r\n        }\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        super.gl().deleteProgram(this.id);\r\n        this.id = null;\r\n    }\r\n\r\n    public use(): void {\r\n        super.gl().useProgram(this.id);\r\n    }\r\n\r\n    public bindUniforms(): void {\r\n        const gl: WebGLRenderingContext = super.gl();\r\n        let currTextureUnitNb: number = 0;\r\n\r\n        Object.keys(this.u).forEach((uName: string) => {\r\n            const uniform = this.u[uName];\r\n            if (uniform.value !== null) {\r\n                if (uniform.type === 0x8B5E || uniform.type === 0x8B60) {\r\n                    const unitNb: number = currTextureUnitNb;\r\n                    types[uniform.type].binder(gl, uniform.loc, unitNb, uniform.value);\r\n                    currTextureUnitNb++;\r\n                } else {\r\n                    types[uniform.type].binder(gl, uniform.loc, uniform.value);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    public bindAttributes(): void {\r\n        Object.keys(this.a).forEach((aName: string) => {\r\n            const attribute = this.a[aName];\r\n            if (attribute.VBO !== null) {\r\n                attribute.VBO.bind(attribute.loc);\r\n            }\r\n        });\r\n    }\r\n\r\n    public bindUniformsAndAttributes(): void {\r\n        this.bindUniforms();\r\n        this.bindAttributes();\r\n    }\r\n\r\n    private introspection(): void {\r\n        const gl = super.gl();\r\n\r\n        this.uCount = gl.getProgramParameter(this.id, gl.ACTIVE_UNIFORMS);\r\n        this.u = {};\r\n        for (let i = 0; i < this.uCount; i++) {\r\n            const uniform = gl.getActiveUniform(this.id, i);\r\n            const name = uniform.name;\r\n\r\n            this.u[name] = {\r\n                loc: gl.getUniformLocation(this.id, name),\r\n                size: uniform.size,\r\n                type: uniform.type,\r\n                value: null,\r\n            };\r\n        }\r\n\r\n        this.aCount = gl.getProgramParameter(this.id, gl.ACTIVE_ATTRIBUTES);\r\n        this.a = {};\r\n        for (let i = 0; i < this.aCount; i++) {\r\n            const attribute = gl.getActiveAttrib(this.id, i);\r\n            const name = attribute.name;\r\n\r\n            this.a[name] = {\r\n                VBO: null,\r\n                loc: gl.getAttribLocation(this.id, name),\r\n                size: attribute.size,\r\n                type: attribute.type,\r\n            };\r\n        }\r\n    }\r\n}\r\n\r\nexport { ShaderProgram as Shader };\r\n","import { GLResource } from \"./gl-resource\";\r\n\r\nenum Usage {\r\n    DYNAMIC,\r\n    STATIC,\r\n}\r\n\r\nclass VBO extends GLResource {\r\n    public static createQuad(gl: WebGLRenderingContext, minX: number, minY: number, maxX: number, maxY: number): VBO {\r\n        const vert = [\r\n            minX, minY,\r\n            maxX, minY,\r\n            minX, maxY,\r\n            maxX, maxY,\r\n        ];\r\n\r\n        return new VBO(gl, new Float32Array(vert), 2, gl.FLOAT, true);\r\n    }\r\n\r\n    private id: WebGLBuffer;\r\n    private size: number;\r\n    private type: GLenum;\r\n    private normalize: GLboolean;\r\n    private stride: GLsizei;\r\n    private offset: GLintptr;\r\n    private usage: Usage;\r\n\r\n    constructor(gl: WebGLRenderingContext, array: any, size: number, type: GLenum, staticUsage: boolean = true) {\r\n        super(gl);\r\n\r\n        this.id = gl.createBuffer();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        if (staticUsage) {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n        } else {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.DYNAMIC_DRAW);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n\r\n        this.size = size;\r\n        this.type = type;\r\n        this.normalize = false;\r\n        this.stride = 0;\r\n        this.offset = 0;\r\n        this.usage = (staticUsage) ? Usage.STATIC : Usage.DYNAMIC;\r\n    }\r\n\r\n    public freeGLResources(): void {\r\n        this.gl().deleteBuffer(this.id);\r\n        this.id = null;\r\n    }\r\n\r\n    public bind(location: GLuint): void {\r\n        const gl = super.gl();\r\n        gl.enableVertexAttribArray(location);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        gl.vertexAttribPointer(location, this.size, this.type, this.normalize, this.stride, this.offset);\r\n    }\r\n\r\n    public setData(array: any): void {\r\n        const gl = super.gl();\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.id);\r\n        if (this.usage === Usage.STATIC) {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.STATIC_DRAW);\r\n        } else {\r\n            gl.bufferData(gl.ARRAY_BUFFER, array, gl.DYNAMIC_DRAW);\r\n        }\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    }\r\n}\r\n\r\nexport { VBO };\r\n","import { gl } from \"./gl-utils/gl-canvas\";\r\nimport { Parameters } from \"./parameters\";\r\n\r\nconst maxResolution = 512;\r\nconst hiddenCanvas = document.createElement(\"canvas\");\r\nconst hiddenCanvasContext = hiddenCanvas.getContext(\"2d\");\r\n\r\nlet currentImageData: ImageData;\r\n\r\nfunction computeBrightness(r: number, g: number, b: number): number {\r\n    return (0.21 * r) + (0.72 * g) + (0.07 * b);\r\n}\r\n\r\nfunction downsizeImageIfNeeded(image: HTMLImageElement): ImageData {\r\n    const scalingFactor = Math.min(1, maxResolution / Math.max(image.width, image.height));\r\n    const finalWidth = Math.ceil(scalingFactor * image.width);\r\n    const finalHeight = Math.ceil(scalingFactor * image.height);\r\n\r\n    hiddenCanvas.width = finalWidth;\r\n    hiddenCanvas.height = finalHeight;\r\n    hiddenCanvasContext.drawImage(image, 0, 0, finalWidth, finalHeight);\r\n\r\n    const imageData = hiddenCanvasContext.getImageData(0, 0, hiddenCanvas.width, hiddenCanvas.height);\r\n    const rawDataCopy = new Uint8ClampedArray(imageData.data);\r\n\r\n    // revert vertically, and store brightness in alpha channel\r\n    let i = 0;\r\n    for (let iY = imageData.height - 1; iY >= 0; iY--) {\r\n        for (let iX = 0; iX < imageData.width; iX++) {\r\n            const r = rawDataCopy[4 * (iX + iY * imageData.width)];\r\n            const g = rawDataCopy[4 * (iX + iY * imageData.width) + 1];\r\n            const b = rawDataCopy[4 * (iX + iY * imageData.width) + 2];\r\n            const brightness = computeBrightness(r, g, b);\r\n            imageData.data[i++] = r;\r\n            imageData.data[i++] = g;\r\n            imageData.data[i++] = b;\r\n            imageData.data[i++] = brightness;\r\n        }\r\n    }\r\n    return imageData;\r\n}\r\n\r\ninterface ITexture {\r\n    id: WebGLTexture;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nconst currentTexture: ITexture = {\r\n    id: null,\r\n    width: -1,\r\n    height: -1,\r\n};\r\n\r\nfunction uploadToGPU(): void {\r\n    if (currentTexture.id !== null) {\r\n        let data: Uint8ClampedArray;\r\n        if (currentImageData) {\r\n            data = currentImageData.data;\r\n            currentTexture.width = currentImageData.width;\r\n            currentTexture.height = currentImageData.height;\r\n        } else {\r\n            data = new Uint8ClampedArray([128, 128, 128, 128]);\r\n            currentTexture.width = 1;\r\n            currentTexture.height = 1;\r\n        }\r\n\r\n        gl.bindTexture(gl.TEXTURE_2D, currentTexture.id);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, currentTexture.width, currentTexture.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n}\r\n\r\nParameters.imageUploadObservers.push((image: HTMLImageElement) => {\r\n    currentImageData = downsizeImageIfNeeded(image);\r\n    uploadToGPU();\r\n});\r\n\r\nfunction getTexture(): ITexture {\r\n    if (currentTexture.id === null) {\r\n        currentTexture.id = gl.createTexture(); // initialize at last moment to ensure gl is loaded\r\n        uploadToGPU();\r\n    }\r\n\r\n    return currentTexture;\r\n}\r\n\r\nexport {\r\n    getTexture,\r\n};\r\n","import \"./page-interface-generated\";\r\n\r\n\r\nconst loadingObjects: { [id: string]: boolean } = {};\r\n\r\nfunction registerLoadingObject(id: string): void {\r\n    if (Object.keys(loadingObjects).length === 0) {\r\n        Page.Canvas.showLoader(true);\r\n    }\r\n    loadingObjects[id] = false;\r\n}\r\n\r\nfunction registerLoadedObject(id: string): void {\r\n    delete loadingObjects[id];\r\n\r\n    if (Object.keys(loadingObjects).length === 0) {\r\n        Page.Canvas.showLoader(false);\r\n    }\r\n}\r\n\r\nexport {\r\n    registerLoadedObject,\r\n    registerLoadingObject,\r\n};\r\n","import * as GLCanvas from \"./gl-utils/gl-canvas\";\r\nimport { gl } from \"./gl-utils/gl-canvas\";\r\n\r\nimport * as FPSIndicator from \"./fps-indicator\";\r\nimport { Parameters } from \"./parameters\";\r\n\r\nimport \"./page-interface-generated\";\r\nimport { Engine } from \"./engine\";\r\nimport { Visor } from \"./visor\";\r\n\r\n\r\nfunction main(): void {\r\n    const webglFlags = {\r\n        alpha: false,\r\n        antialias: true,\r\n        depth: false,\r\n        stencil: false,\r\n        preserveDrawingBuffer: false,\r\n    };\r\n    if (!GLCanvas.initGL(webglFlags)) {\r\n        return;\r\n    }\r\n    gl.disable(gl.CULL_FACE);\r\n    gl.disable(gl.BLEND);\r\n\r\n    const canvas = Page.Canvas.getCanvas();\r\n\r\n    Parameters.blurChangeObservers.push(() => { updateBlur(canvas); });\r\n    updateBlur(canvas);\r\n\r\n    let needToAdjustCanvasSize = true;\r\n    Parameters.canvasResizeObservers.push(() => { needToAdjustCanvasSize = true; });\r\n\r\n    let needToReset = true;\r\n    Parameters.resetObservers.push(() => { needToReset = true; });\r\n\r\n    let needToDownload = false;\r\n    Parameters.imageDownloadObservers.push(() => { needToDownload = true; });\r\n\r\n    const engine = new Engine();\r\n    const visor = new Visor();\r\n\r\n    function mainLoop(): void {\r\n        FPSIndicator.registerFrame();\r\n\r\n        if (needToDownload) {\r\n            // redraw before resizing the canvas because the download pane might open, which changes the canvas size\r\n            engine.drawToCanvas(); // redraw because preserveDrawingBuffer is false\r\n            download(canvas);\r\n            needToDownload = false;\r\n        }\r\n\r\n        if (needToAdjustCanvasSize) {\r\n            GLCanvas.adjustSize(false);\r\n            gl.viewport(0, 0, canvas.width, canvas.height);\r\n            engine.initialize(canvas.width, canvas.height);\r\n            needToAdjustCanvasSize = false;\r\n        }\r\n\r\n        if (needToReset) {\r\n            engine.initialize(canvas.width, canvas.height);\r\n            needToReset = false;\r\n        }\r\n\r\n        engine.update();\r\n        engine.drawToCanvas();\r\n\r\n        visor.update();\r\n\r\n        if (Parameters.displayBrush) {\r\n            engine.displayBrush();\r\n        }\r\n\r\n        requestAnimationFrame(mainLoop);\r\n    }\r\n    mainLoop();\r\n}\r\n\r\nfunction updateBlur(canvas: HTMLElement): void {\r\n    const blur = Parameters.blur;\r\n    if (blur <= 0) {\r\n        canvas.style.filter = \"\";\r\n    } else {\r\n        canvas.style.filter = `blur(${blur}px)`;\r\n    }\r\n}\r\n\r\nfunction download(canvas: HTMLCanvasElement): void {\r\n    const name = \"reaction-diffusion.png\";\r\n\r\n    if ((canvas as any).msToBlob) { // for IE\r\n        const blob = (canvas as any).msToBlob();\r\n        window.navigator.msSaveBlob(blob, name);\r\n    } else {\r\n        canvas.toBlob((blob: Blob) => {\r\n            const link = document.createElement(\"a\");\r\n            link.download = name;\r\n            link.href = URL.createObjectURL(blob);\r\n            link.click();\r\n        });\r\n    }\r\n}\r\n\r\nmain();\r\n","import * as Loader from \"./loader\";\r\n\r\nimport \"./page-interface-generated\";\r\n\r\n\r\n/* === IDs ============================================================ */\r\nconst controlId = {\r\n    PARAMETERS_MAP_TABS: \"map-tabs-id\",\r\n    INPUT_IMAGE_UPLOAD: \"input-image-upload-button\",\r\n    PATTERNS_SCALE: \"pattern-scale-range-id\",\r\n    A_FEEDING_RANGE: \"A-feeding-range-id\",\r\n    A_DIFFUSION_RANGE: \"A-diffusion-range-id\",\r\n    B_KILLING_RANGE: \"B-killing-range-id\",\r\n    B_DIFFUSION_RANGE: \"B-diffusion-range-id\",\r\n    PICK_VALUES_BUTTON: \"pick-values-button-id\",\r\n    RESET_VALUES_BUTTON: \"reset-values-button-id\",\r\n\r\n    SPEED_RANGE: \"speed-range-id\",\r\n    BRUSH_SIZE_RANGE: \"brush-size-range-id\",\r\n    BRUSH_DISPLAY_CHECKBOX: \"brush-display-checkbox-id\",\r\n    INITIAL_STATE_TABS: \"initial-state-tabs-id\",\r\n    RESET_BUTTON: \"reset-button-id\",\r\n\r\n    DISPLAY_MODE_TABS: \"display-mode-tabs-id\",\r\n    BLUR_RANGE: \"blur-range-id\",\r\n    INDICATORS_CHECKBOX: \"indicators-checkbox-id\",\r\n\r\n    IMAGE_DOWNLOAD: \"image-download-id\",\r\n};\r\n\r\ntype Observer = () => unknown;\r\ntype ImageUploadObserver = (image: HTMLImageElement) => unknown;\r\n\r\nfunction callObservers(observers: Observer[]): void {\r\n    for (const observer of observers) {\r\n        observer();\r\n    }\r\n}\r\n\r\nenum EParametersMap {\r\n    UNIFORM = \"uniform\",\r\n    VALUE_PICKING = \"value_picking\", // technical, not defined in the control\r\n    IMAGE = \"image\",\r\n}\r\nlet isInValuePickingMode = false;\r\n\r\nenum EInitialState {\r\n    BLANK = \"blank\",\r\n    DISC = \"disc\",\r\n    CIRCLE = \"circle\",\r\n}\r\n\r\nenum EDisplayMode {\r\n    MONOCHROME = \"monochrome\",\r\n    TRICOLOR = \"tricolor\",\r\n}\r\n\r\nconst updateParametersVisibility = () => {\r\n    const map = Parameters.parametersMap;\r\n    Page.Controls.setVisibility(controlId.A_FEEDING_RANGE, map !== EParametersMap.IMAGE);\r\n    Page.Controls.setVisibility(controlId.B_KILLING_RANGE, map !== EParametersMap.IMAGE);\r\n    Page.Controls.setVisibility(controlId.PICK_VALUES_BUTTON, map !== EParametersMap.IMAGE);\r\n    Page.Controls.setVisibility(controlId.RESET_VALUES_BUTTON, map !== EParametersMap.IMAGE);\r\n    Page.Controls.setVisibility(controlId.PATTERNS_SCALE, map === EParametersMap.IMAGE);\r\n    Page.Controls.setVisibility(controlId.A_DIFFUSION_RANGE, map !== EParametersMap.IMAGE);\r\n    Page.Controls.setVisibility(controlId.B_DIFFUSION_RANGE, map !== EParametersMap.IMAGE);\r\n    Page.Controls.setVisibility(controlId.INPUT_IMAGE_UPLOAD, map === EParametersMap.IMAGE);\r\n    Page.Controls.setVisibility(controlId.DISPLAY_MODE_TABS, map === EParametersMap.IMAGE);\r\n};\r\n\r\nabstract class Parameters {\r\n    public static readonly imageUploadObservers: ImageUploadObserver[] = [];\r\n    public static readonly imageDownloadObservers: Observer[] = [];\r\n    public static readonly canvasResizeObservers: Observer[] = [];\r\n    public static readonly resetObservers: Observer[] = [];\r\n    public static readonly blurChangeObservers: Observer[] = [];\r\n\r\n    public static get parametersMap(): EParametersMap {\r\n        if (isInValuePickingMode) {\r\n            return EParametersMap.VALUE_PICKING;\r\n        }\r\n        return Page.Tabs.getValues(controlId.PARAMETERS_MAP_TABS)[0] as EParametersMap;\r\n    }\r\n    public static exitValuePickingMode(): void {\r\n        isInValuePickingMode = false;\r\n        Page.Tabs.setValues(controlId.PARAMETERS_MAP_TABS, [EParametersMap.UNIFORM]);\r\n        updateParametersVisibility();\r\n    }\r\n\r\n    public static get patternsScale(): number {\r\n        return Page.Range.getValue(controlId.PATTERNS_SCALE);\r\n    }\r\n    public static get AFeedingRate(): number {\r\n        return Page.Range.getValue(controlId.A_FEEDING_RANGE);\r\n    }\r\n    public static set AFeedingRate(value: number) {\r\n        Page.Range.setValue(controlId.A_FEEDING_RANGE, value, true);\r\n    }\r\n    public static get ADiffusionRate(): number {\r\n        return Page.Range.getValue(controlId.A_DIFFUSION_RANGE);\r\n    }\r\n    public static get BKillingRate(): number {\r\n        return Page.Range.getValue(controlId.B_KILLING_RANGE);\r\n    }\r\n    public static set BKillingRate(value: number) {\r\n        Page.Range.setValue(controlId.B_KILLING_RANGE, value, true);\r\n    }\r\n    public static get BDIffusionRate(): number {\r\n        return Page.Range.getValue(controlId.B_DIFFUSION_RANGE);\r\n    }\r\n\r\n    public static get speed(): number {\r\n        return Page.Range.getValue(controlId.SPEED_RANGE);\r\n    }\r\n    public static get brushSize(): number {\r\n        return Page.Range.getValue(controlId.BRUSH_SIZE_RANGE);\r\n    }\r\n    public static get displayBrush(): boolean {\r\n        return !isInValuePickingMode && Page.Checkbox.isChecked(controlId.BRUSH_DISPLAY_CHECKBOX);\r\n    }\r\n    public static get initialState(): EInitialState {\r\n        if (isInValuePickingMode) {\r\n            return EInitialState.CIRCLE;\r\n        }\r\n        return Page.Tabs.getValues(controlId.INITIAL_STATE_TABS)[0] as EInitialState;\r\n    }\r\n\r\n    public static get blur(): number {\r\n        return Page.Range.getValue(controlId.BLUR_RANGE);\r\n    }\r\n\r\n    public static get displayMode(): EDisplayMode {\r\n        if (Parameters.parametersMap === EParametersMap.IMAGE) {\r\n            return Page.Tabs.getValues(controlId.DISPLAY_MODE_TABS)[0] as EDisplayMode;\r\n        } else {\r\n            return EDisplayMode.MONOCHROME;\r\n        }\r\n    }\r\n}\r\n\r\nconst callCanvasResizeObservers = () => { callObservers(Parameters.canvasResizeObservers); };\r\nPage.Canvas.Observers.canvasResize.push(callCanvasResizeObservers);\r\n\r\nconst callResetObservers = () => { callObservers(Parameters.resetObservers); };\r\nPage.Button.addObserver(controlId.RESET_BUTTON, callResetObservers);\r\nPage.Tabs.addObserver(controlId.PARAMETERS_MAP_TABS, callResetObservers);\r\nPage.Tabs.addObserver(controlId.DISPLAY_MODE_TABS, callResetObservers);\r\nPage.Tabs.addObserver(controlId.INITIAL_STATE_TABS, callResetObservers);\r\nParameters.imageUploadObservers.push(callResetObservers);\r\n\r\nPage.Tabs.addObserver(controlId.PARAMETERS_MAP_TABS, () => {\r\n    isInValuePickingMode = false;\r\n    updateParametersVisibility();\r\n});\r\nupdateParametersVisibility();\r\n\r\nconst updateIndicatorsVisibility = () => {\r\n    Page.Canvas.setIndicatorsVisibility(Page.Checkbox.isChecked(controlId.INDICATORS_CHECKBOX));\r\n};\r\nPage.Checkbox.addObserver(controlId.INDICATORS_CHECKBOX, updateIndicatorsVisibility);\r\nupdateIndicatorsVisibility();\r\n\r\nPage.Button.addObserver(controlId.RESET_VALUES_BUTTON, () => {\r\n    Page.Range.setValue(controlId.A_FEEDING_RANGE, 0.054, true);\r\n    Page.Range.setValue(controlId.A_DIFFUSION_RANGE, 0.2097, true);\r\n    Page.Range.setValue(controlId.B_KILLING_RANGE, 0.0620, true);\r\n    Page.Range.setValue(controlId.B_DIFFUSION_RANGE, 0.1050, true);\r\n});\r\n\r\nPage.Button.addObserver(controlId.PICK_VALUES_BUTTON, () => {\r\n    Page.Tabs.setValues(controlId.PARAMETERS_MAP_TABS, []);\r\n    isInValuePickingMode = true;\r\n    updateParametersVisibility();\r\n    callResetObservers();\r\n});\r\n\r\nPage.Range.addObserver(controlId.BLUR_RANGE, () => {\r\n    callObservers(Parameters.blurChangeObservers);\r\n});\r\n\r\nPage.FileControl.addUploadObserver(controlId.INPUT_IMAGE_UPLOAD, (filesList: FileList) => {\r\n    if (filesList.length === 1) {\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n            const image = new Image();\r\n            image.addEventListener(\"load\", () => {\r\n                for (const observer of Parameters.imageUploadObservers) {\r\n                    observer(image);\r\n                }\r\n            });\r\n            image.src = reader.result as string;\r\n        };\r\n        reader.readAsDataURL(filesList[0]);\r\n    }\r\n});\r\n{\r\n    const id = \"default-image\";\r\n    Loader.registerLoadingObject(id);\r\n\r\n    const defaultImage = new Image();\r\n    defaultImage.addEventListener(\"load\", () => {\r\n        Loader.registerLoadedObject(id);\r\n\r\n        for (const observer of Parameters.imageUploadObservers) {\r\n            observer(defaultImage);\r\n        }\r\n    });\r\n    defaultImage.src = \"./resources/cat.jpg\";\r\n}\r\n\r\nPage.FileControl.addDownloadObserver(controlId.IMAGE_DOWNLOAD, () => {\r\n    callObservers(Parameters.imageDownloadObservers);\r\n    callResetObservers();\r\n});\r\n\r\nexport {\r\n    EDisplayMode,\r\n    EInitialState,\r\n    EParametersMap,\r\n    Parameters,\r\n};\r\n","import { RenderToTexture } from \"./render-to-texture\";\r\n\r\nclass RenderToTextureSwapable {\r\n    private previousTexture: RenderToTexture;\r\n    private currentTexture: RenderToTexture;\r\n\r\n    public constructor() {\r\n        this.previousTexture = new RenderToTexture();\r\n        this.currentTexture = new RenderToTexture();\r\n    }\r\n\r\n    public get previous(): WebGLTexture {\r\n        return this.previousTexture.texture;\r\n    }\r\n    public get current(): WebGLTexture {\r\n        return this.currentTexture.texture;\r\n    }\r\n    public get currentFramebuffer(): WebGLFramebuffer {\r\n        return this.currentTexture.framebuffer;\r\n    }\r\n\r\n    public get width(): number {\r\n        return this.previousTexture.width;\r\n    }\r\n    public get height(): number {\r\n        return this.previousTexture.height;\r\n    }\r\n\r\n\r\n    public reserveSpace(width: number, height: number): void {\r\n        this.previousTexture.reserveSpace(width, height);\r\n        this.currentTexture.reserveSpace(width, height);\r\n    }\r\n\r\n    public swap(): void {\r\n        const tmp = this.currentTexture;\r\n        this.currentTexture = this.previousTexture;\r\n        this.previousTexture = tmp;\r\n    }\r\n}\r\n\r\nexport {\r\n    RenderToTextureSwapable,\r\n};\r\n","import { gl } from \"../gl-utils/gl-canvas\";\r\n\r\n\r\nclass RenderToTexture {\r\n    public readonly texture: WebGLTexture;\r\n    public readonly framebuffer: WebGLFramebuffer;\r\n    private _width: number;\r\n    private _height: number;\r\n\r\n    public constructor() {\r\n        this.texture = gl.createTexture();\r\n        this.framebuffer = gl.createFramebuffer();\r\n        this._width = -1;\r\n        this._height = -1;\r\n    }\r\n\r\n    public reserveSpace(wantedWidth: number, wantedHeight: number): void {\r\n        wantedWidth = Math.ceil(wantedWidth);\r\n        wantedHeight = Math.ceil(wantedHeight);\r\n\r\n        if (this.width !== wantedWidth || this.height !== wantedHeight) {\r\n            gl.bindTexture(gl.TEXTURE_2D, this.texture);\r\n\r\n            const format = gl.RGBA;\r\n            gl.texImage2D(gl.TEXTURE_2D, 0, format, wantedWidth, wantedHeight, 0, format, gl.UNSIGNED_BYTE, null);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);\r\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n\r\n            gl.bindTexture(gl.TEXTURE_2D, null);\r\n\r\n            this._width = wantedWidth;\r\n            this._height = wantedHeight;\r\n        }\r\n    }\r\n\r\n    public get width(): number {\r\n        return this._width;\r\n    }\r\n\r\n    public get height(): number {\r\n        return this._height;\r\n    }\r\n}\r\n\r\nexport {\r\n    RenderToTexture,\r\n};\r\n","import { Engine } from \"./engine\";\r\nimport \"./page-interface-generated\";\r\nimport { EParametersMap, Parameters } from \"./parameters\";\r\n\r\nenum EBarDirection {\r\n    HORIZONTAL = \"horizontal\",\r\n    VERTICAL = \"vertical\",\r\n}\r\n\r\ninterface IBar {\r\n    container: HTMLElement;\r\n    legendContainer: HTMLElement;\r\n    legendValue: HTMLSpanElement;\r\n}\r\n\r\nclass Visor {\r\n    private readonly horizontalLine: IBar;\r\n    private readonly verticalLine: IBar;\r\n\r\n    public constructor() {\r\n        const container = Page.Canvas.getCanvasContainer();\r\n\r\n        this.horizontalLine = Visor.createBar(EBarDirection.HORIZONTAL, \"B killing rate\");\r\n        container.appendChild(this.horizontalLine.container);\r\n\r\n        this.verticalLine = Visor.createBar(EBarDirection.VERTICAL, \"A feeding rate\");\r\n        container.appendChild(this.verticalLine.container);\r\n\r\n        Page.Canvas.getCanvas().addEventListener(\"click\", () => {\r\n            if (Parameters.parametersMap === EParametersMap.VALUE_PICKING) {\r\n                const currentPos = Page.Canvas.getMousePosition();\r\n                Parameters.AFeedingRate = Visor.aimedFeedA(currentPos);\r\n                Parameters.BKillingRate = Visor.aimedKillB(currentPos);\r\n                Parameters.exitValuePickingMode();\r\n            }\r\n        });\r\n    }\r\n\r\n    public update(): void {\r\n        const mousePosition = Page.Canvas.getMousePosition();\r\n        const isVisible = (Parameters.parametersMap === EParametersMap.VALUE_PICKING) && Visor.isInRange(0, 1, mousePosition[0]) && Visor.isInRange(0, 1, mousePosition[1]);\r\n\r\n        if (isVisible) {\r\n            this.horizontalLine.legendValue.textContent = Visor.toString(Visor.aimedFeedA(mousePosition), 5);\r\n            this.verticalLine.legendValue.textContent = Visor.toString(Visor.aimedKillB(mousePosition), 5);\r\n\r\n            const canvasSize = Page.Canvas.getSize();\r\n            const hPixel = Math.round(mousePosition[0] * canvasSize[0]);\r\n            const vPixel = Math.round(mousePosition[1] * canvasSize[1]);\r\n            this.horizontalLine.container.style.left = `${hPixel}px`;\r\n            {\r\n                const legendBox = this.horizontalLine.legendContainer.getBoundingClientRect();\r\n                const size = legendBox.width;\r\n                if (hPixel - 0.5 * size < 0) {\r\n                    this.horizontalLine.legendContainer.style.left = `${0.5 * size - hPixel}px`;\r\n                } else if (hPixel + 0.5 * size > canvasSize[0]) {\r\n                    this.horizontalLine.legendContainer.style.left = `${canvasSize[0] - (hPixel + 0.5 * size)}px`;\r\n                } else {\r\n                    this.horizontalLine.legendContainer.style.left = \"\";\r\n                }\r\n            }\r\n\r\n            this.verticalLine.container.style.top = `${vPixel}px`;\r\n            {\r\n                const legendBox = this.verticalLine.legendContainer.getBoundingClientRect();\r\n                const size = legendBox.height;\r\n                if (vPixel - 0.5 * size < 0) {\r\n                    this.verticalLine.legendContainer.style.top = `${0.5 * size - vPixel}px`;\r\n                } else if (vPixel + 0.5 * size > canvasSize[1]) {\r\n                    this.verticalLine.legendContainer.style.top = `${canvasSize[1] - (vPixel + 0.5 * size)}px`;\r\n                } else {\r\n                    this.verticalLine.legendContainer.style.top = \"\";\r\n                }\r\n            }\r\n        }\r\n\r\n        const display = isVisible ? \"\" : \"none\";\r\n        this.horizontalLine.container.style.display = display;\r\n        this.verticalLine.container.style.display = display;\r\n    }\r\n\r\n    private static aimedFeedA(mousePos: number[]): number {\r\n        const y = Visor.clamp(0, 1, 1 - mousePos[1]);\r\n        return Visor.interpolate(Engine.A_FEEDING_MIN, Engine.A_FEEDING_MAX, y);\r\n    }\r\n\r\n    private static aimedKillB(mousePos: number[]): number {\r\n        const x = Visor.clamp(0, 1, mousePos[0]);\r\n        return Visor.interpolate(Engine.B_KILLING_MIN, Engine.B_KILLING_MAX, x);\r\n    }\r\n\r\n    private static createBar(direction: EBarDirection, label: string): IBar {\r\n        const container = document.createElement(\"div\");\r\n        container.classList.add(\"visor-bar\");\r\n        container.classList.add(direction);\r\n        container.style.display = \"none\";\r\n\r\n        const legendContainer = document.createElement(\"div\");\r\n        legendContainer.classList.add(\"visor-bar-legend\");\r\n\r\n        const labelElement = document.createElement(\"span\");\r\n        labelElement.textContent = label;\r\n        legendContainer.appendChild(labelElement);\r\n        legendContainer.appendChild(document.createElement(\"br\"));\r\n        const legendValue = document.createElement(\"span\");\r\n        legendValue.textContent = \"?\";\r\n        legendContainer.appendChild(legendValue);\r\n\r\n        container.appendChild(legendContainer);\r\n\r\n        return {\r\n            container,\r\n            legendContainer,\r\n            legendValue,\r\n        };\r\n    }\r\n\r\n    private static clamp(min: number, max: number, x: number): number {\r\n        if (x < min) return min;\r\n        if (x > max) return max;\r\n        return x;\r\n    }\r\n\r\n    private static interpolate(a: number, b: number, x: number): number {\r\n        return b * x + a * (1 - x);\r\n    }\r\n\r\n    private static isInRange(min: number, max: number, x: number): boolean {\r\n        return min <= x && x <= max;\r\n    }\r\n\r\n    private static toString(x: number, maxDigits: number): string {\r\n        const raw = x.toString();\r\n        const dotIndex = raw.indexOf(\".\");\r\n        if (dotIndex < 0) {\r\n            return raw;\r\n        } else {\r\n            const nbDigits = Math.min(maxDigits, raw.length - (dotIndex + 1));\r\n            return raw.substring(0, dotIndex + 1 + nbDigits);\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    Visor,\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(633);\n"],"sourceRoot":""}